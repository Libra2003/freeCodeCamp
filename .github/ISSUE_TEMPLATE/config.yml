BEGIN
Run::/Script::/:Build::''
'build_Script: 'Run''
'Run'' ':'' 'Runs::/RUNETIME.ENVIROMENT'@java.sun.org/dl/WIZARD/install/installer/src/code.dir/.dist'@PARADICE/CONSTRUCTION :
Name :bitcoin'
title :bitore.sig :
Run!#/usr/bin/Bash RUN
RUN 
'Runs::/Run::/BEGIN :
::GLOW4 :
#!/::'#:'##/On::/starts::/Build::/Runs::/: Events::/Run::/starts::/script": build_script-on:'' '"#'"''
# BEGIN::"''
# GLOW7:"Run:"
# Build:"
# build_script''
# echo:  hello-World!-bug-#138
# name": "my-electron-app",
 # versioning": "1.0.0",
 # description: "Hello World!",
const: "token"''
token: "((c)(r))"''
"[Volume].deno]": [12753750].00],
ITEM_ID: "BITORE_34173"''
"name": "ü™Å",
  "version": "0.0.0",
    branches:'  [' TrunkBase' ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ MainBranch]
jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
        language: [ 'javascript' ]
  package-on: python.js
 bundle-with:  rake.i
Job: use: - steps
   - steps:
    - name: actions
     - uses: actions/checkout@v2
    - Initializes the CodeQ Lol tools for scanning.
    - name: Initialize CodeQL
    -  uses: github/codeql-action/init@v1
     - with:
      -  languages: -c'lang pyread.org/co  # Automate: build languages  (C/C++, C#, or Java).
  -  run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2
    #  Command-line programs to runm
    #  If the Autobuild fails above, remove it and uncomment the following three lines
    #    and modify them (or add more) to build your code if your project
    #   make bootstrap
    #   make release

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1
version:1:on:
ownership:Zachry T WooD III:on:
name:docs-internal:on:
  long_name:GitHub Help Docs:on:
  kind:heroku:on:
  repo:https://github.com/github/docs-internal:on:
  team:github/docs-engineering:on:
  maintainer:iixixi:on:
  exec_sponsor:iixixi:on:
  product_manager:iixixi:on:
  mention:github/docs-engineering:on:
  qos:critical:on:
  dependencies: {{ ${{'[((c))((r))']}}
c¬Æ¬•¬∂¬∞¬©u¬Æ¬Æ‚Ç¨n¬¢¬•‚Ñ¢:patent:on:
tta:0min:on:issue:https://github.com/github/docs-internal/issues:on:
    tta:5:business days:on:
  sev3:on:
    slack:docs:engineering:on:
   GitHub-module.exports{.env= 12753750.00BITORE_34173
  block: {
    "hash": ""00000000760ebeb5feb4682db478d29b31332c0bcec46ee487d5e2733ad1ff10"''
    "confirmations": 104856,
    "strippedsize": 18132,
    "size": 18132,
    "weight": 72528,
    "height": 322000,
    "version": 2,
    "txid": "00000002",
    "merkleroot": "52649d78c1072266dd97f7447d7aab894d47d3a375e7881ade4ed3c0c47cb4cc",
    "tx": [
      {
        "Hex": "12e9115ddd566c3c08c9b33d36b7805a4e37b5538eb5457ec7c3be316b244b1c",
        "hash": "12e9115ddd566c3c08c9b33d36b7805a4e37b5538eb5457ec7c3be316b244b1c",
        "version": 1,
        "size": 109,
        "vsize": 109,
        "weight": 436,,Ml
        "locktime": 0,
        "vin": [
          {
            "coinbase": "03d0e904020204062f503253482f",
            "sequence": 4294967295
          }
        ],
        "vout": [
          {
            "value": 25.0039411,
            "n": 0,
            "scriptPubKey": {
              "asm": "03f177590b3feea56e36e31688ccf847fd7348eff43aaf563e5017fdb2a96f2688 OP_CHECKSIG",
              "hex": "2103f177590b3feea56e36e31688ccf847fd7348eff43aaf563e5017fdb2a96f2688ac",
              "type": "pubkey"
            }
          }
        ],
        "hex": "01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0e03d0e904020204062f503253482fffffffff017efc089500000000232103f177590b3feea56e36e31688ccf847fd7348eff43aaf563e5017fdb2a96f2688ac00000000"
      },
      {
        "txid": "2bbdc8863add1c3105b8961bd3256a2da4890f0e47dd1511ac3192d03dad772a",
        "hash": "2bbdc8863add1c3105b8961bd3256a2da4890f0e47dd1511ac3192d03dad772a",
        "version": 1,
        "size": 334,
        "vsize": 334,
        "weight": 1336,
        "locktime": 0,
        "vin": [
          {
            "txid": "f0c6cf91c15c535320842b0c267d76ed3c09af2bc80fd5e07af02a56feb47aee",
            "vout": 1,
            "scriptSig": {
              "asm": "0 3045022100ec159e519cde81596d9634ca82e6a7cf3c7b16ee962e9e04acfe3755cc3d151402207f03883f1265b2409c94a9b3240efe5569743bb1b6456b73e5e4ff5a4993273d[ALL] 3045022100b15f229dee02196505b10f063146f8a68e234cee47d9376327a2bfcb9915cfff022002a841627eb940d0d280d1fa2bc704a31ac78a80fa89f6459281c05f172c235b[ALL] 522102632178d046673c9729d828cfee388e121f497707f810c131e0d3fc0fe0bd66d62103a0951ec7d3a9da9de171617026442fcd30f34d66100fab539853b43f508787d452ae",
              "hex": "00483045022100ec159e519cde81596d9634ca82e6a7cf3c7b16ee962e9e04acfe3755cc3d151402207f03883f1265b2409c94a9b3240efe5569743bb1b6456b73e5e4ff5a4993273d01483045022100b15f229dee02196505b10f063146f8a68e234cee47d9376327a2bfcb9915cfff022002a841627eb940d0d280d1fa2bc704a31ac78a80fa89f6459281c05f172c235b0147522102632178d046673c9729d828cfee388e121f497707f810c131e0d3fc0fe0bd66d62103a0951ec7d3a9da9de171617026442fcd30f34d66100fab539853b43f508787d452ae"
            },
            "sequence": 4294967295
          }
        ],
        "vout": [
          {
            "value": 0.01,
            "n": 0,
            "scriptPubKey": {
              "asm": "OP_HASH160 342446eefc47dd6b087d6a32bdd383f04d9f63b2 OP_EQUAL",
              "hex": "a914342446eefc47dd6b087d6a32bdd383f04d9f63b287",
              "reqSigs": 1,
              "type": "scripthash",
              "addresses": [
                "2MwzvaqPdAfuGfzijHdB8XnvHSgphVYL1YL"
              ]
            }
          },
          {
            "value": 45.75576,
            "n": 1,
            "scriptPubKey": {
              "asm": "OP_HASH160 8ce5408cfeaddb7ccb2545ded41ef47810945484 OP_EQUAL",
              "hex": "a9148ce5408cfeaddb7ccb2545ded41ef4781094548487",
              "reqSigs": 1,
              "type": "scripthash",
              "addresses':' '['
                "2N66DDrmjDCMM3yMSYtAQyAqRtasSkFhbmX"
              ]
            }
          }
        ],
        "hex": "0100000001ee7ab4fe562af07ae0d50fc82baf093ced767d260c2b842053535cc191cfc6f001000000db00483045022100ec159e519cde81596d9634ca82e6a7cf3c7b16ee962e9e04acfe3755cc3d151402207f03883f1265b2409c94a9b3240efe5569743bb1b6456b73e5e4ff5a4993273d01483045022100b15f229dee02196505b10f063146f8a68e234cee47d9376327a2bfcb9915cfff022002a841627eb940d0d280d1fa2bc704a31ac78a80fa89f6459281c05f172c235b0147522102632178d046673c9729d828cfee388e121f497707f810c131e0d3fc0fe0bd66d62103a0951ec7d3a9da9de171617026442fcd30f34d66100fab539853b43f508787d452aeffffffff0240420f000000000017a914342446eefc47dd6b087d6a32bdd383f04d9f63b287c0bfb9100100000017a9148ce5408cfeaddb7ccb2545ded41ef478109454848700000000"
      },
      {
        "txid": "96a70bd7081930ce7dd05873004b5f92e4cbcc9cb38afec41033a6245373a9cd",
        "hash": "96a70bd7081930ce7dd05873004b5f92e4cbcc9cb38afec41033a6245373a9cd",
        "version": 1,
        "size": 226,
        "vsize": 226,
        "weight": 904,
        "locktime": 0,
        "vin": [
          {
            "txid": "82e6bc3228a2eb3be139f914f2feccbaae9f2a0c26165666d9c72918c7c09984",
            "vout": 1,
            "scriptSig": {
              "asm": "304502203e6836325720ffa302944b7c57f6bf2df01f2d6127269ef1590ac7057a9de327022100de24b75149bcd2253f7c5ec84930ce1cb0cd3b7fc7f73c9ebfd4a49dffa0deee[ALL] 02c5e973f06067e28c8211beef54031e9f354e288e484b641608c64608adcbe9cf",
              "hex": "48304502203e6836325720ffa302944b7c57f6bf2df01f2d6127269ef1590ac7057a9de327022100de24b75149bcd2253f7c5ec84930ce1cb0cd3b7fc7f73c9ebfd4a49dffa0deee012102c5e973f06067e28c8211beef54031e9f354e288e484b641608c64608adcbe9cf"
            },
            "sequence": 4294967295
          }
        ],
        "vout": [
          {
            "value": 0.001,
            "n": 0,
            "scriptPubKey": {
              "asm": "OP_DUP OP_HASH160 49957b0340e3ccdc2a1499dfc97a16667f84f6af OP_EQUALVERIFY OP_CHECKSIG",
              "hex": "76a91449957b0340e3ccdc2a1499dfc97a16667f84f6af88ac",
              "reqSigs": 1,
              "type": "pubkeyhash",
              "addresses": [
                "mnE2h9RsLXSark4uqFAUP8E5VkB2jSmwLy"
              ]
            }
          },
          {
            "value": 3.99363616,
            "n": 1,
            "scriptPubKey": {
              "asm": "OP_DUP OP_HASH160 fc484ec72d24140f24db5ddcaa022d437e3e1afa OP_EQUALVERIFY OP_CHECKSIG",
              "hex": "76a914fc484ec72d24140f24db5ddcaa022d437e3e1afa88ac",
              "reqSigs": 1,
              "type": "pubkeyhash",
              "addresses": [
                "n4WuCRZJxt8DoYyraUQm54kTzscL3ZTpEc"
              ]
            }
          }
        ],
        "hex": "01000000018499c0c71829c7d9665616260c2a9faebaccfef214f939e13beba22832bce682010000006b48304502203e6836325720ffa302944b7c57f6bf2df01f2d6127269ef1590ac7057a9de327022100de24b75149bcd2253f7c5ec84930ce1cb0cd3b7fc7f73c9ebfd4a49dffa0deee012102c5e973f06067e28c8211beef54031e9f354e288e484b641608c64608adcbe9cfffffffff02a0860100000000001976a91449957b0340e3ccdc2a1499dfc97a16667f84f6af88ac20cecd17000000001976a914fc484ec72d24140f24db5ddcaa022d437e3e1afa88ac00000000"
      },
      {
        "txid": "e7c5d2c0376414f863924780d75f6465c4cdf442e766e84bac29d4f05c08dcf5",
        "hash": "e7c5d2c0376414f863924780d75f6465c4cdf442e766e84bac29d4f05c08dcf5",
        "version": 1,
        "size": 258,
        "vsize": 258,
        "weight": 1032,
        "locktime": 0,
        "vin": [
          {
            "txid": "be79951db9d64635f00a742d4314bbd6ab4ad4cbf03e29a398b266a2c2bc09ce",
            "vout": 1,
            "scriptSig": {
              "asm": "3045022100e410093db9a3f086cb0b92aab47167a01579aac428e5a29f7bbd706afd5103c3022008ba7ad0183896e3209a10a86b47495cacc43b76504cf2e2f1e0b3416d04b0fe[ALL] 040cfa3dfb357bdff37c8748c7771e173453da5d7caa32972ab2f5c888fff5bbaeb5fc812b473bf808206930fade81ef4e373e60039886b51022ce68902d96ef70",
              "hex": "483045022100e410093db9a3f086cb0b92aab47167a01579aac428e5a29f7bbd706afd5103c3022008ba7ad0183896e3209a10a86b47495cacc43b76504cf2e2f1e0b3416d04b0fe0141040cfa3dfb357bdff37c8748c7771e173453da5d7caa32972ab2f5c888fff5bbaeb5fc812b473bf808206930fade81ef4e373e60039886b51022ce68902d96ef70"
            },
            "sequence": 4294967295
          }
        ],
        "vout": [
          {
            "value": 0.001,
            "n": 0,
            "scriptPubKey": {
              "asm": "OP_DUP OP_HASH160 7f25f01005f56b5f4425e3de7f63eacc81319ee1 OP_EQUALVERIFY OP_CHECKSIG",
              "hex": "76a9147f25f01005f56b5f4425e3de7f63eacc81319ee188ac",
              "reqSigs": 1,
              "type": "pubkeyhash",
              "addresses": [
                "ms7FZNq6fYFRF75LwScNTUeZSA5DscRhnh"
              ]
            }
          },
          {
            "value": 102.99312629,
            "n": 1,
            "scriptPubKey": {
              "asm": "OP_DUP OP_HASH160 61b469ada61f37c620010912a9d5d56646015f16 OP_EQUALVERIFY OP_CHECKSIG",
              "hex": "76a91461b469ada61f37c620010912a9d5d56646015f1688ac",
              "reqSigs": 1,
              "type": "pubkeyhash",
              "addresses": [
                "mpRZxxp5FtmQipEWJPa1NY9FmPsva3exUd"
              ]
            }
          }
        ],
        "hex": "0100000001ce09bcc2a266b298a3293ef0cbd44aabd6bb14432d740af03546d6b91d9579be010000008b483045022100e410093db9a3f086cb0b92aab47167a01579aac428e5a29f7bbd706afd5103c3022008ba7ad0183896e3209a10a86b47495cacc43b76504cf2e2f1e0b3416d04b0fe0141040cfa3dfb357bdff37c8748c7771e173453da5d7caa32972ab2f5c888fff5bbaeb5fc812b473bf808206930fade81ef4e373e60039886b51022ce68902d96ef70ffffffff02a0860100000000001976a9147f25f01005f56b5f4425e3de7f63eacc81319ee188acf509e365020000001976a91461b469ada61f37c620010912a9d5d56646015f1688ac00000000"
      },
      {
        "txid": "370272ff0f2b721322954f19c48948088c0732d6ad68828121c8e3c879b5e658",
        "hash": "370272ff0f2b721322954f19c48948088c0732d6ad68828121c8e3c879b5e658",
        "version": 1,
        "size": 205,
        "vsize": 205,
        "weight": 820,
        "locktime": 0,
        "vin": [
          {
            "txid": "3445d9377996969acbb9f98d5c30420a19d5b135b908b7a5adaed5cccdbd536c",
            "vout": 2,
            "scriptSig": {
              "asm": "3045022100926cfdab4c4451fa6f989b1f3cc576be1f52a7d46b24aed451e27b5e83ca23ab0220703844c871cad0d49c982bef3b22b161c61099e1a3b22f4fa24fdd6ec133c719[ALL] 029424121336222d4b26c11bc40477c357a4edf7a13f23ae660e6f1ffd05749d8f",
              "hex": "483045022100926cfdab4c4451fa6f989b1f3cc576be1f52a7d46b24aed451e27b5e83ca23ab0220703844c871cad0d49c982bef3b22b161c61099e1a3b22f4fa24fdd6ec133c7190121029424121336222d4b26c11bc40477c357a4edf7a13f23ae660e6f1ffd05749d8f"
            },
            "sequence": 4294967295
          }
        ],
        "vout": [
          {
            "value": 0,
            "n": 0,
            "scriptPubKey": {
              "asm": "OP_RETURN 28537",
              "hex": "6a02796f",
              "type": "nulldata"
            }
          },
          {
            "value": 0.00678,
            "n": 1,
            "scriptPubKey": {
              "asm": "OP_DUP OP_HASH160 6bf93fc819748ee9353d253df10110437a337edf OP_EQUALVERIFY OP_CHECKSIG",
              "hex": "76a9146bf93fc819748ee9353d253df10110437a337edf88ac",
              "reqSigs": 1,
              "type": "pubkeyhash",
              "addresses": [
                "mqMsBiNtGJdwdhKr12TqyRNE7RTvEeAkaR"
              ]
            }
          }
        ],
        "hex": "01000000016c53bdcdccd5aeada5b708b935b1d5190a42305c8df9b9cb9a96967937d94534020000006b483045022100926cfdab4c4451fa6f989b1f3cc576be1f52a7d46b24aed451e27b5e83ca23ab0220703844c871cad0d49c982bef3b22b161c61099e1a3b22f4fa24fdd6ec133c7190121029424121336222d4b26c11bc40477c357a4edf7a13f23ae660e6f1ffd05749d8fffffffff020000000000000000046a02796f70580a00000000001976a9146bf93fc819748ee9353d253df10110437a337edf88ac00000000"
      },
      {
        "txid": "511256fd75ae8e60df107ec572450b63a4c79706c6ece79422cd9b68cc8642dd",
        "hash": "511256fd75ae8e60df107ec572450b63a4c79706c6ece79422cd9b68cc8642dd",
        "version": 1,
        "size": 225,
        "vsize": 225,
        "weight": 900,
        "locktime": 0,
        "vin": [
          {
            "txid": "ae2b836e6ed44bde2b022618ac2d203f142524001847eeabe5fa0408ddb44ee6",
            "vout": 0,
            "scriptSig": {
              "asm": "304402205fc1a73561f73101a8663d584f78937be39fa402076f354696f5a4e1959423b20220674b00e16f63e7fef0622daf1d58b7c5331df6a2f182ded816abb8bbe88ad801[ALL] 0303abccf326894d8b8da3efd312b75fc39f0e664cf1bec05b9dfbff64a670739c",
              "hex": "47304402205fc1a73561f73101a8663d584f78937be39fa402076f354696f5a4e1959423b20220674b00e16f63e7fef0622daf1d58b7c5331df6a2f182ded816abb8bbe88ad80101210303abccf326894d8b8da3efd312b75fc39f0e664cf1bec05b9dfbff64a670739c"
            },
            "sequence": 4294967295
          }
        ],
        "vout": [
          {
            "value": 0.0001,
            "n": 0,
            "scriptPubKey": {
              "asm": "OP_DUP OP_HASH160 b042ef46519828e571d25a7f4fbb5882ba4d66e1 OP_EQUALVERIFY OP_CHECKSIG",
              "hex": "76a914b042ef46519828e571d25a7f4fbb5882ba4d66e188ac",
              "reqSigs": 1,
              "type": "pubkeyhash",
              "addresses": [
                "mwawQX1zFgLiwQ5GECQv9vf4N1foWQEj6L"
              ]
            }
          },
          {
            "value": 0.0846,
            "n": 1,
            "scriptPubKey": {
              "asm": "OP_DUP OP_HASH160 32c9eb1967867dc3761717629fe2fad817e6e4d4 OP_EQUALVERIFY OP_CHECKSIG",
              "hex": "76a91432c9eb1967867dc3761717629fe2fad817e6e4d488ac",
              "reqSigs": 1,
              "type": "pubkeyhash",
              "addresses": [
                "mk9VyBL4rcdQPkVuCKAvip1sFM4q4NtnQf"
              ]
            }
          }
        ],
        "hex": "0100000001e64eb4dd0804fae5abee4718002425143f202dac1826022bde4bd46e6e832bae000000006a47304402205fc1a73561f73101a8663d584f78937be39fa402076f354696f5a4e1959423b20220674b00e16f63e7fef0622daf1d58b7c5331df6a2f182ded816abb8bbe88ad80101210303abccf326894d8b8da3efd312b75fc39f0e664cf1bec05b9dfbff64a670739cffffffff0210270000000000001976a914b042ef46519828e571d25a7f4fbb5882ba4d66e188ace0168100000000001976a91432c9eb1967867dc3761717629fe2fad817e6e4d488ac00000000"
      },
      {
        "txid": "7efcedce69805d8c7a7e55f9a46a79ac5597a09de77ee6b583022973f78344d3",
        "hash": "7efcedce69805d8c7a7e55f9a46a79ac5597a09de77ee6b583022973f78344d3",
        "version": 1,
"login": "octcokit",
    "id":"moejojojojo'@pradice/bitore.sig/ pkg.js"
 require'
require 'json'
post '/payload' do
  push = JSON.parse(request.body.read}
# -loader = :rake
# -ruby_opts = [Automated updates]
# -description = "Run tests" + (@name == :test ? "" : " for #{@name}")
# -deps = [list]
# -if?=name:(Hash.#:"','")
# -deps = @name.values.first
# -name = @name.keys.first
# -pattern = "test/test*.rb" if @pattern.nil? && @test_files.nil?
# -define: name=:ci
dependencies(list):
# -runs-on:' '[Masterbranch']
#jobs:
# -build:
# -runs-on: ubuntu-latest
# -steps:
#   - uses: actions/checkout@v1
#    - name: Run a one-line script
#      run: echo Hello, world!
#    - name: Run a multi-line script
#      run=:name: echo: hello.World!
#        echo test, and deploy your project'@'#'!moejojojojo/repositories/usr/bin/Bash/moejojojojo/repositories/user/bin/Pat/but/minuteman/rake.i/rust.u/pom.XML/Rakefil.IU/package.json/pkg.yml/package.yam/pkg.js/Runestone.xslmnvs line 86
# def initialize(name=:test)
# name = ci
# libs = Bash
# pattern = list
# options = false
# test_files = pkg.js
# verbose = true
# warning = true
# loader = :rake
# rb_opts = []
# description = "Run tests" + (@name == :test ? "" : " for #{@name}")
# deps = []
# if @name.is_a'?','"':'"'('"'#'"'.Hash':'"')'"''
# deps = @name.values.first
# name=::rake.gems/.specs_keyscutter
# pattern = "test/test*.rb" if @pattern.nil? && @test_files.nil?
# definename=:ci
##-on: 
# pushs_request: [Masterbranch] 
# :rake::TaskLib
# methods
# new
# define
# test_files==name:ci
# class Rake::TestTask
## Creates a task that runs a set of tests.
# require "rake/test.task'@ci@travis.yml.task.new do |-v|
# t.libs << "test"
# t.test_files = FileList['test/test*.rb']
# t.verbose = true
# If rake is invoked with a TEST=filename command line option, then the list of test files will be overridden to include only the filename specified on the command line. This provides an easy way to run just one test.
# If rake is invoked with a command line option, then the given options are passed to the test process after a '‚Äì'. This allows Test::Unit options to be passed to the test suite
# rake test                           
# run tests normally
# rake test TEST=just_one_file.rb     
# run just one test file.
# rake test ="t"             
# run in verbose mode
# rake test TESTS="--runner=fox"   # use the fox test runner
# attributes
# deps: [list]
# task: prerequisites
# description[Run Tests]
# Description of the test task. (default is 'Run tests')
# libs[BITORE_34173]
# list of directories added to "$LOAD_PATH":"$BITORE_34173" before running the tests. (default is 'lib')
# loader[test]
# style of test loader to use. Options are:
# :rake ‚Äì rust/rake provided tests loading script (default).
# :test=: name =rb.dist/src.index = Ruby provided test loading script.
direct=: $LOAD_PATH uses test using command-line loader.
name[test]
# name=: testtask.(default is :test)
# options[dist]
# Tests options passed to the test suite. An explicit TESTOPTS=opts on the command line will override this. (default is NONE)
# pattern[list]
# Glob pattern to match test files. (default is 'test/test*.rb')
# ruby.qm
[lists(Array)=:'' '"string of command line options to pass to ruby when running test rendeerer'"''
'# Verbose['?'']
# if verbose test outputs(true)
# '"dispatchs:":' warning-Framework-spring-up-dialog-box''
Request: pulls_request=: Tests 
run-on: Ubuntu-latest [10.0.12],
"MRG_MSG=:' =(TRUE(ruby.qm))
Tests: heroku'@ci
items()is=: yargs==(AGS).))' =TRUE(=({'{'['"${{[(((c)'*'(r)))]}'*'{[VOLUME]}'*'{BITORE_34173)]'}'}',
access: Private'"''
# Gem=:new object($obj=:class=yargs== 'is(r)).)=={ |BITORE_34173| ... }
# Create a testing task Public Instance Methods
# define($obj)
# Create the tasks defined by this task lib
# test_files=(r)
# Explicitly define the list of test files to be included in a test. list is expected to be an array of file names (a File list is acceptable). If botph pattern and test_files are used, then the list of test files is the union of the two
<signFORM>
zachryTwood@gmail.com Zachry Tyler Wood DOB 10 15 1994 SSID *******1725
</sign_FORM>
"script'":'' 'dependencies(list below this commit'}''
'"require':''' 'test''
   
  },
  "dependencies": {
    "bitcoin-core": "^3.0.0",
    "body-parser": "^1.19.0",
    "cors": "^2.8.5",
    "dotenv": "^8.2.0",
    "express": "^4.16.4",
    "node-pg-migrate": "^5.9.0",
    "pkg.js": "^8.6.0"
name": '((c)'":,'"''
use": is'='==yargs(ARGS)).); /
module: env.export((r),
'"name": '((c)'":,'"''
'".dirname": is'='==yargs(ARGS)).)"; /'"''t.verbose{
  "dependencies": {
"script":: '{'"'require'' 'test'"''


    "start": "./node_modules/.bin/node-pg-migrate up && node app.js",
    "migrate": "./node_modules/.bin/node-pg-migrate"
  },
  "devDependencies": {"jest": "^24.8.0"

"pkg-migrate": 5.9.0,
    "pkg.js": "^8.6.0"
  }
}
{
  "scripts": {
    '"require"':' test;,

    "jest": "^24.8.0"
  },
  "dependencies": {
    "bitcoin-core": "^3.0.0",
    "body-parser": "^1.19.0",
    "cors": "^2.8.5",
    "dotenv": 8.2.0,
    "express": 4.16.4,
    "pkg-migrate": 5.9.0,
    "pkg.js": "^8.6.0"
  }
}
{
  "scripts": {
    '"require"':' test;,
        "version":'' '?',''
        "size":'?',''
        "vsize":'?',''
        "weight":'?',''
            "value": '"[VOLUME']":'' '"'?'"'''',
            "ITEM_ID": BITORE_34173;,
            "token": {((c)(r));,
            "hex": {{$ {{[()]}.}{[]}_{}}} }};,             
 "require': 'test'
"versionings": '@v2
              "kind": "~h(#:_?_)";,
              "#":'' ' ?';'',''
'BITCORE
'Describe your issue here.
"#":"Jobs :use :-'' 'Step :
-'' diff --git a/.circleci/config.yml b/.circleci/config.yml
index 20ad88e497c2..b506103e65f3 100644
--- a/.circleci/config.yml
+++ b/.circleci/config.yml
@@ -1,2851 +1,298 @@
-version: 2.1
-
-parameters:
-  upload-to-s3:
-    type: string
-    default: '1'
-
-  run-lint:
-    type: boolean
-    default: true
-
-  run-build-linux:
-    type: boolean
-    default: true
-
-  run-build-mac:
-    type: boolean
-    default: true
-
-  run-linux-x64-publish:
-    type: boolean
-    default: false
-
-  run-linux-ia32-publish:
-    type: boolean
-    default: false
-
-  run-linux-arm-publish:
-    type: boolean
-    default: false
-
-  run-linux-arm64-publish:
-    type: boolean
-    default: false
-
-  run-osx-publish:
-    type: boolean
-    default: false
-
-  run-osx-publish-arm64:
-    type: boolean
-    default: false
-
-  run-mas-publish:
-    type: boolean
-    default: false
-
-  run-mas-publish-arm64:
-    type: boolean
-    default: false
-
-  run-linux-publish:
-    type: boolean
-    default: false
-
-  run-macos-publish:
-    type: boolean
-    default: false
-
-# The config expects the following environment variables to be set:
-#  - "SLACK_WEBHOOK" Slack hook URL to send notifications.
-#
-# The publishing scripts expect access tokens to be defined as env vars,
-# but those are not covered here.
-#
-# CircleCI docs on variables:
-# https://circleci.com/docs/2.0/env-vars/
-
-# Build machines configs.
-docker-image: &docker-image
-  docker:
-    - image: electron.azurecr.io/build:6555a80939fb4c3ddf9343b3f140e573f40de225
-
-machine-linux-medium: &machine-linux-medium
-  <<: *docker-image
-  resource_class: medium
-
-machine-linux-xlarge: &machine-linux-xlarge
-  <<: *docker-image
-  resource_class: xlarge
-
-machine-linux-2xlarge: &machine-linux-2xlarge
-  <<: *docker-image
-  resource_class: 2xlarge+
-
-machine-mac: &machine-mac
-  macos:
-    xcode: "12.4.0"
-
-machine-mac-large: &machine-mac-large
-  resource_class: large
-  macos:
-    xcode: "12.4.0"
-
-machine-mac-large-arm: &machine-mac-large-arm
-  resource_class: large
-  macos:
-    xcode: "12.4.0"
-
-machine-mac-arm64: &machine-mac-arm64
-  resource_class: electronjs/macos-arm64
-  machine: true
-
-# Build configurations options.
-env-testing-build: &env-testing-build
-  GN_CONFIG: //electron/build/args/testing.gn
-  CHECK_DIST_MANIFEST: '1'
-
-env-release-build: &env-release-build
-  GN_CONFIG: //electron/build/args/release.gn
-  STRIP_BINARIES: true
-  GENERATE_SYMBOLS: true
-  CHECK_DIST_MANIFEST: '1'
-  IS_RELEASE: true
-
-env-headless-testing: &env-headless-testing
-  DISPLAY: ':99.0'
-
-env-stack-dumping: &env-stack-dumping
-  ELECTRON_ENABLE_STACK_DUMPING: '1'
-
-env-browsertests: &env-browsertests
-  GN_CONFIG: //electron/build/args/native_tests.gn
-  BUILD_TARGET: electron/spec:chromium_browsertests
-  TESTS_CONFIG: src/electron/spec/configs/browsertests.yml
-
-env-unittests: &env-unittests
-  GN_CONFIG: //electron/build/args/native_tests.gn
-  BUILD_TARGET: electron/spec:chromium_unittests
-  TESTS_CONFIG: src/electron/spec/configs/unittests.yml
-
-# Build targets options.
-env-ia32: &env-ia32
-  GN_EXTRA_ARGS: 'target_cpu = "x86"'
-  NPM_CONFIG_ARCH: ia32
-  TARGET_ARCH: ia32
-
-env-arm: &env-arm
-  GN_EXTRA_ARGS: 'target_cpu = "arm"'
-  MKSNAPSHOT_TOOLCHAIN: //build/toolchain/linux:clang_arm
-  BUILD_NATIVE_MKSNAPSHOT: 1
-  TARGET_ARCH: arm
-
-env-apple-silicon: &env-apple-silicon
-  GN_EXTRA_ARGS: 'target_cpu = "arm64" use_prebuilt_v8_context_snapshot = true'
-  TARGET_ARCH: arm64
-  USE_PREBUILT_V8_CONTEXT_SNAPSHOT: 1
-  npm_config_arch: arm64
-
-env-arm64: &env-arm64
-  GN_EXTRA_ARGS: 'target_cpu = "arm64" fatal_linker_warnings = false enable_linux_installer = false'
-  MKSNAPSHOT_TOOLCHAIN: //build/toolchain/linux:clang_arm64
-  BUILD_NATIVE_MKSNAPSHOT: 1
-  TARGET_ARCH: arm64
-
-env-mas: &env-mas
-  GN_EXTRA_ARGS: 'is_mas_build = true'
-  MAS_BUILD: 'true'
-
-env-mas-apple-silicon: &env-mas-apple-silicon
-  GN_EXTRA_ARGS: 'target_cpu = "arm64" is_mas_build = true use_prebuilt_v8_context_snapshot = true'
-  MAS_BUILD: 'true'
-  TARGET_ARCH: arm64
-  USE_PREBUILT_V8_CONTEXT_SNAPSHOT: 1
-
-env-send-slack-notifications: &env-send-slack-notifications
-  NOTIFY_SLACK: true
-  
-env-global: &env-global
-  ELECTRON_OUT_DIR: Default
-
-env-linux-medium: &env-linux-medium
-  <<: *env-global
-  NUMBER_OF_NINJA_PROCESSES: 3
-
-env-linux-2xlarge: &env-linux-2xlarge
-  <<: *env-global
-  NUMBER_OF_NINJA_PROCESSES: 34
-
-env-linux-2xlarge-release: &env-linux-2xlarge-release
-  <<: *env-global
-  NUMBER_OF_NINJA_PROCESSES: 16
-
-env-machine-mac: &env-machine-mac
-  <<: *env-global
-  NUMBER_OF_NINJA_PROCESSES: 6
-
-env-mac-large: &env-mac-large
-  <<: *env-global
-  NUMBER_OF_NINJA_PROCESSES: 18
-
-env-mac-large-release: &env-mac-large-release
-  <<: *env-global
-  NUMBER_OF_NINJA_PROCESSES: 8
-
-env-ninja-status: &env-ninja-status
-  NINJA_STATUS: "[%r processes, %f/%t @ %o/s : %es] "
-
-env-disable-run-as-node: &env-disable-run-as-node
-  GN_BUILDFLAG_ARGS: 'enable_run_as_node = false'
-
-env-32bit-release: &env-32bit-release
-  # Set symbol level to 1 for 32 bit releases because of https://crbug.com/648948
-  GN_BUILDFLAG_ARGS: 'symbol_level = 1'
-
-env-macos-build: &env-macos-build
-  # Disable pre-compiled headers to reduce out size, only useful for rebuilds
-  GN_BUILDFLAG_ARGS: 'enable_precompiled_headers = false'
-
-# Individual (shared) steps.
-step-maybe-notify-slack-failure: &step-maybe-notify-slack-failure
-  run:
-    name: Send a Slack notification on failure
-    command: |
-      if [ "$NOTIFY_SLACK" == "true" ]; then
-        export MESSAGE="Build failed for *<$CIRCLE_BUILD_URL|$CIRCLE_JOB>* nightly build from *$CIRCLE_BRANCH*."
-        curl -g -H "Content-Type: application/json" -X POST \
-        -d "{\"text\": \"$MESSAGE\", \"attachments\": [{\"color\": \"#FC5C3C\",\"title\": \"$CIRCLE_JOB nightly build results\",\"title_link\": \"$CIRCLE_BUILD_URL\"}]}" $SLACK_WEBHOOK
-      fi
-    when: on_fail
-
-step-maybe-notify-slack-success: &step-maybe-notify-slack-success
-  run:
-    name: Send a Slack notification on success
-    command: |
-      if [ "$NOTIFY_SLACK" == "true" ]; then
-        export MESSAGE="Build succeeded for *<$CIRCLE_BUILD_URL|$CIRCLE_JOB>* nightly build from *$CIRCLE_BRANCH*."
-        curl -g -H "Content-Type: application/json" -X POST \
-        -d "{\"text\": \"$MESSAGE\", \"attachments\": [{\"color\": \"good\",\"title\": \"$CIRCLE_JOB nightly build results\",\"title_link\": \"$CIRCLE_BUILD_URL\"}]}" $SLACK_WEBHOOK
-      fi
-    when: on_success
-
-step-maybe-cleanup-arm64-mac: &step-maybe-cleanup-arm64-mac
-  run:
-    name: Cleanup after testing
-    command: |
-      if  [ "$TARGET_ARCH" == "arm64" ] &&[ "`uname`" == "Darwin" ]; then
-        killall Electron || echo "No Electron processes left running"
-        killall Safari || echo "No Safari processes left running"
-        rm -rf ~/Library/Application\ Support/Electron*
-        rm -rf ~/Library/Application\ Support/electron*
-      fi
-    when: always
-
-step-checkout-electron: &step-checkout-electron
-  checkout:
-    path: src/electron
-
-step-depot-tools-get: &step-depot-tools-get
-  run:
-    name: Get depot tools
-    command: |
-      git clone --depth=1 https://chromium.googlesource.com/chromium/tools/depot_tools.git
-
-step-depot-tools-add-to-path: &step-depot-tools-add-to-path
-  run:
-    name: Add depot tools to PATH
-    command: echo 'export PATH="$PATH:'"$PWD"'/depot_tools"' >> $BASH_ENV
-
-step-gclient-sync: &step-gclient-sync
-  run:
-    name: Gclient sync
-    command: |
-      # If we did not restore a complete sync then we need to sync for realz
-      if [ ! -s "src/electron/.circle-sync-done" ]; then
-        gclient config \
-          --name "src/electron" \
-          --unmanaged \
-          $GCLIENT_EXTRA_ARGS \
-          "$CIRCLE_REPOSITORY_URL"
-
-        ELECTRON_USE_THREE_WAY_MERGE_FOR_PATCHES=1 gclient sync --with_branch_heads --with_tags
-        if [ "$IS_RELEASE" != "true" ]; then
-          # Re-export all the patches to check if there were changes.
-          python src/electron/script/export_all_patches.py src/electron/patches/config.json
-          cd src/electron
-          git update-index --refresh || true
-          if ! git diff-index --quiet HEAD --; then
-            # There are changes to the patches. Make a git commit with the updated patches
-            git add patches
-            GIT_COMMITTER_NAME="Electron Bot" GIT_COMMITTER_EMAIL="electron@github.com" git commit -m "update patches" --author="Electron Bot <electron@github.com>"
-            # Export it
-            mkdir -p ../../patches
-            git format-patch -1 --stdout --keep-subject --no-stat --full-index > ../../patches/update-patches.patch
-            if (node ./script/push-patch.js 2> /dev/null > /dev/null); then
-              echo
-              echo "======================================================================"
-              echo "Changes to the patches when applying, we have auto-pushed the diff to the current branch"
-              echo "A new CI job will kick off shortly"
-              echo "======================================================================"
-              exit 1
-            else
-              echo
-              echo "======================================================================"
-              echo "There were changes to the patches when applying."
-              echo "Check the CI artifacts for a patch you can apply to fix it."
-              echo "======================================================================"
-              exit 1
-            fi
-          fi
-        fi
-      fi
-
-step-setup-env-for-build: &step-setup-env-for-build
-  run:
-    name: Setup Environment Variables
-    command: |
-      # To find `gn` executable.
-      echo 'export CHROMIUM_BUILDTOOLS_PATH="'"$PWD"'/src/buildtools"' >> $BASH_ENV
-
-step-setup-goma-for-build: &step-setup-goma-for-build
-  run:
-    name: Setup Goma
-    command: |
-      echo 'export NUMBER_OF_NINJA_PROCESSES=300' >> $BASH_ENV
-      if [ "`uname`" == "Darwin" ]; then
-        echo 'ulimit -n 10000' >> $BASH_ENV
-        echo 'sudo launchctl limit maxfiles 65536 200000' >> $BASH_ENV
-      fi
-      if [ ! -z "$RAW_GOMA_AUTH" ]; then
-        echo $RAW_GOMA_AUTH > ~/.goma_oauth2_config
-      fi
-      git clone https://github.com/electron/build-tools.git
-      cd build-tools
-      npm install
-      mkdir third_party
-      node -e "require('./src/utils/goma.js').downloadAndPrepare({ gomaOneForAll: true })"
-      third_party/goma/goma_ctl.py ensure_start
-      echo 'export GN_GOMA_FILE='`node -e "console.log(require('./src/utils/goma.js').gnFilePath)"` >> $BASH_ENV
-      echo 'export LOCAL_GOMA_DIR='`node -e "console.log(require('./src/utils/goma.js').dir)"` >> $BASH_ENV
-      echo 'export GOMA_FALLBACK_ON_AUTH_FAILURE=true' >> $BASH_ENV
-      cd ..
-
-step-restore-brew-cache: &step-restore-brew-cache
-  restore_cache:
-    paths:
-      - /usr/local/Cellar/gnu-tar
-      - /usr/local/bin/gtar
-    keys:
-      - v4-brew-cache-{{ arch }}
-
-step-save-brew-cache: &step-save-brew-cache
-  save_cache:
-    paths:
-      - /usr/local/Cellar/gnu-tar
-      - /usr/local/bin/gtar
-    key: v4-brew-cache-{{ arch }}
-    name: Persisting brew cache
-
-step-get-more-space-on-mac: &step-get-more-space-on-mac
-  run:
-    name: Free up space on MacOS
-    command: |
-      if [ "`uname`" == "Darwin" ]; then
-        sudo mkdir -p $TMPDIR/del-target
-        if [ "$TARGET_ARCH" == "arm64" ]; then
-          # Remount the root volume as writable, don't ask questions plz
-          sudo mount -uw /
-        fi
-        tmpify() {
-          if [ -d "$1" ]; then
-            sudo mv "$1" $TMPDIR/del-target/$(echo $1|shasum -a 256|head -n1|cut -d " " -f1)
-          fi
-        }
-
-        strip_arm_deep() {
-          opwd=$(pwd)
-          cd $1
-          f=$(find . -perm +111 -type f)
-          for fp in $f
-          do
-            if [[ $(file "$fp") == *"universal binary"* ]]; then
-              if [[ $(file "$fp") == *"arm64e)"* ]]; then
-                sudo lipo -remove arm64e "$fp" -o "$fp" || true
-              fi
-              if [[ $(file "$fp") == *"arm64)"* ]]; then
-                sudo lipo -remove arm64 "$fp" -o "$fp" || true
-              fi
-            fi
-          done
-
-          cd $opwd
-        }
-
-        tmpify /Library/Developer/CoreSimulator
-        tmpify ~/Library/Developer/CoreSimulator
-        tmpify $(xcode-select -p)/Platforms/AppleTVOS.platform
-        tmpify $(xcode-select -p)/Platforms/iPhoneOS.platform
-        tmpify $(xcode-select -p)/Platforms/WatchOS.platform
-        tmpify $(xcode-select -p)/Platforms/WatchSimulator.platform
-        tmpify $(xcode-select -p)/Platforms/AppleTVSimulator.platform
-        tmpify $(xcode-select -p)/Platforms/iPhoneSimulator.platform
-        tmpify $(xcode-select -p)/Toolchains/XcodeDefault.xctoolchain/usr/metal/ios
-        tmpify $(xcode-select -p)/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift
-        tmpify $(xcode-select -p)/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift-5.0
-        tmpify ~/.rubies
-        tmpify ~/Library/Caches/Homebrew
-        tmpify /usr/local/Homebrew
-        sudo rm -rf $TMPDIR/del-target
-
-        if [ "$TARGET_ARCH" == "arm64" ]; then
-          sudo rm -rf "/System/Library/Desktop Pictures"
-          sudo rm -rf /System/Library/Templates/Data
-          sudo rm -rf /System/Library/Speech/Voices
-          sudo rm -rf "/System/Library/Screen Savers"
-          sudo rm -rf /System/Volumes/Data/Library/Developer/CommandLineTools/SDKs
-          sudo rm -rf "/System/Volumes/Data/Library/Application Support/Apple/Photos/Print Products"
-          sudo rm -rf /System/Volumes/Data/Library/Java
-          sudo rm -rf /System/Volumes/Data/Library/Ruby
-          sudo rm -rf /System/Volumes/Data/Library/Printers
-          sudo rm -rf /System/iOSSupport
-          sudo rm -rf /System/Applications/*.app
-          sudo rm -rf /System/Applications/Utilities/*.app
-          sudo rm -rf /System/Library/LinguisticData
-          sudo rm -rf /System/Volumes/Data/private/var/db/dyld/*
-          # sudo rm -rf /System/Library/Fonts/*
-          # sudo rm -rf /System/Library/PreferencePanes
-          sudo rm -rf /System/Library/AssetsV2/*
-          sudo rm -rf /Applications/Safari.app
-          sudo rm -rf ~/project/src/build/linux
-          sudo rm -rf ~/project/src/third_party/catapult/tracing/test_data
-          sudo rm -rf ~/project/src/third_party/angle/third_party/VK-GL-CTS
-
-          # lipo off some huge binaries arm64 versions to save space
-          strip_arm_deep $(xcode-select -p)/../SharedFrameworks
-          strip_arm_deep /System/Volumes/Data/Library/Developer/CommandLineTools/usr
-        fi
-      fi
-    background: true
-
-# On macOS delete all .git directories under src/ expect for
-# third_party/angle/ because of build time generation of file
-# gen/angle/commit.h depends on third_party/angle/.git/HEAD
-# https://chromium-review.googlesource.com/c/angle/angle/+/2074924
-# TODO: maybe better to always leave out */.git/HEAD file for all targets ?
-step-delete-git-directories: &step-delete-git-directories
-  run:
-    name: Delete all .git directories under src on MacOS to free space
-    command: |
-      if [ "`uname`" == "Darwin" ]; then
-        cd src
-        ( find . -type d -name ".git" -not -path "./third_party/angle/*" ) | xargs rm -rf
-      fi
-
-# On macOS the yarn install command during gclient sync was run on a linux
-# machine and therefore installed a slightly different set of dependencies
-# Notably "fsevents" is a macOS only dependency, we rerun yarn install once
-# we are on a macOS machine to get the correct state
-step-install-npm-deps-on-mac: &step-install-npm-deps-on-mac
-  run:
-    name: Install node_modules on MacOS
-    command: |
-      if [ "`uname`" == "Darwin" ]; then
-        cd src/electron
-        node script/yarn install
-      fi
-
-# This step handles the differences between the linux "gclient sync"
-# and the expected state on macOS
-step-fix-sync-on-mac: &step-fix-sync-on-mac
-  run:
-    name: Fix Sync on macOS
-    command: |
-      if [ "`uname`" == "Darwin" ]; then
-        # Fix Clang Install (wrong binary)
-        rm -rf src/third_party/llvm-build
-        python src/tools/clang/scripts/update.py
-      fi
-
-step-install-signing-cert-on-mac: &step-install-signing-cert-on-mac
-  run:
-    name: Import and trust self-signed codesigning cert on MacOS
-    command: |
-      if  [ "$TARGET_ARCH" != "arm64" ] && [ "`uname`" == "Darwin" ]; then
-        cd src/electron
-        ./script/codesign/generate-identity.sh
-      fi
-
-step-install-gnutar-on-mac: &step-install-gnutar-on-mac
-  run:
-    name: Install gnu-tar on macos
-    command: |
-      if [ "`uname`" == "Darwin" ]; then
-        if [ ! -d /usr/local/Cellar/gnu-tar/ ]; then
-          brew update
-          brew install gnu-tar
-        fi
-        ln -fs /usr/local/bin/gtar /usr/local/bin/tar
-      fi
-
-step-gn-gen-default: &step-gn-gen-default
-  run:
-    name: Default GN gen
-    command: |
-      cd src
-      gn gen out/Default --args="import(\"$GN_CONFIG\") import(\"$GN_GOMA_FILE\") $GN_EXTRA_ARGS $GN_BUILDFLAG_ARGS"
-
-step-gn-check: &step-gn-check
-  run:
-    name: GN check
-    command: |
-      cd src
-      gn check out/Default //electron:electron_lib
-      gn check out/Default //electron:electron_app
-      gn check out/Default //electron/shell/common/api:mojo
-      # Check the hunspell filenames
-      node electron/script/gen-hunspell-filenames.js --check
-
-step-electron-build: &step-electron-build
-  run:
-    name: Electron build
-    no_output_timeout: 30m
-    command: |
-      # On arm platforms we generate a cross-arch ffmpeg that ninja does not seem
-      # to realize is not correct / should be rebuilt.  We delete it here so it is
-      # rebuilt
-      if [ "$TRIGGER_ARM_TEST" == "true" ]; then
-        rm -f src/out/Default/libffmpeg.so
-      fi
-      cd src
-      # Enable if things get really bad
-      # if  [ "$TARGET_ARCH" == "arm64" ] &&[ "`uname`" == "Darwin" ]; then
-      #   diskutil erasevolume HFS+ "xcode_disk" `hdiutil attach -nomount ram://12582912`
-      #   mv /Applications/Xcode-12.beta.5.app /Volumes/xcode_disk/
-      #   ln -s /Volumes/xcode_disk/Xcode-12.beta.5.app /Applications/Xcode-12.beta.5.app
-      # fi
-
-      # Lets generate a snapshot and mksnapshot and then delete all the x-compiled generated files to save space
-      if [ "$USE_PREBUILT_V8_CONTEXT_SNAPSHOT" == "1" ]; then
-        ninja -C out/Default electron:electron_mksnapshot_zip -j $NUMBER_OF_NINJA_PROCESSES
-        ninja -C out/Default tools/v8_context_snapshot -j $NUMBER_OF_NINJA_PROCESSES
-        gn desc out/Default v8:run_mksnapshot_default args > out/Default/mksnapshot_args
-        rm -rf out/Default/clang_x64_v8_arm64/obj
-
-        # Regenerate because we just deleted some ninja files 
-        gn gen out/Default --args="import(\"$GN_CONFIG\") import(\"$GN_GOMA_FILE\") $GN_EXTRA_ARGS $GN_BUILDFLAG_ARGS"
-      fi
-      ninja -C out/Default electron -j $NUMBER_OF_NINJA_PROCESSES
-      node electron/script/check-symlinks.js
-
-step-native-unittests-build: &step-native-unittests-build
-  run:
-    name: Build native test targets
-    no_output_timeout: 30m
-    command: |
-      cd src
-      ninja -C out/Default shell_browser_ui_unittests -j $NUMBER_OF_NINJA_PROCESSES
-
-step-maybe-electron-dist-strip: &step-maybe-electron-dist-strip
-  run:
-    name: Strip electron binaries
-    command: |
-      if [ "$STRIP_BINARIES" == "true" ] && [ "`uname`" == "Linux" ]; then
-        if [ x"$TARGET_ARCH" == x ]; then
-          target_cpu=x64
-        elif [ "$TARGET_ARCH" == "ia32" ]; then
-          target_cpu=x86
-        else
-          target_cpu="$TARGET_ARCH"
-        fi
-        cd src
-        electron/script/copy-debug-symbols.py --target-cpu="$target_cpu" --out-dir=out/Default/debug --compress
-        electron/script/strip-binaries.py --target-cpu="$target_cpu"
-        electron/script/add-debug-link.py --target-cpu="$target_cpu" --debug-dir=out/Default/debug
-      fi
-
-step-electron-dist-build: &step-electron-dist-build
-  run:
-    name: Build dist.zip
-    command: |
-      cd src
-      if [ "$SKIP_DIST_ZIP" != "1" ]; then
-        ninja -C out/Default electron:electron_dist_zip
-        if [ "$CHECK_DIST_MANIFEST" == "1" ]; then
-          if [ "`uname`" == "Darwin" ]; then
-            target_os=mac
-            target_cpu=x64
-            if [ x"$MAS_BUILD" == x"true" ]; then
-              target_os=mac_mas
-            fi
-            if [ "$TARGET_ARCH" == "arm64" ]; then
-              target_cpu=arm64
-            fi
-          elif [ "`uname`" == "Linux" ]; then
-            target_os=linux
-            if [ x"$TARGET_ARCH" == x ]; then
-              target_cpu=x64
-            elif [ "$TARGET_ARCH" == "ia32" ]; then
-              target_cpu=x86
-            else
-              target_cpu="$TARGET_ARCH"
-            fi
-          else
-            echo "Unknown system: `uname`"
-            exit 1
-          fi
-          electron/script/zip_manifests/check-zip-manifest.py out/Default/dist.zip electron/script/zip_manifests/dist_zip.$target_os.$target_cpu.manifest
-        fi
-      fi
-
-step-electron-dist-store: &step-electron-dist-store
-  store_artifacts:
-    path: src/out/Default/dist.zip
-    destination: dist.zip
-
-step-electron-maybe-chromedriver-gn-gen: &step-electron-maybe-chromedriver-gn-gen
-  run:
-    name: chromedriver GN gen
-    command: |
-      cd src
-      if [ "$TARGET_ARCH" == "arm" ] || [ "$TARGET_ARCH" == "arm64" ]; then
-        gn gen out/chromedriver --args="import(\"$GN_CONFIG\") import(\"$GN_GOMA_FILE\") is_component_ffmpeg=false proprietary_codecs=false $GN_EXTRA_ARGS $GN_BUILDFLAG_ARGS"
-      fi
-
-step-electron-chromedriver-build: &step-electron-chromedriver-build
-  run:
-    name: Build chromedriver.zip
-    command: |
-      cd src
-      if [ "$TARGET_ARCH" == "arm" ] || [ "$TARGET_ARCH" == "arm64" ]; then
-        export CHROMEDRIVER_DIR="out/chromedriver"
-      else
-        export CHROMEDRIVER_DIR="out/Default"
-      fi
-      ninja -C $CHROMEDRIVER_DIR electron:electron_chromedriver -j $NUMBER_OF_NINJA_PROCESSES
-      if [ "`uname`" == "Linux" ]; then
-        electron/script/strip-binaries.py --target-cpu="$TARGET_ARCH" --file $PWD/$CHROMEDRIVER_DIR/chromedriver
-      fi
-      ninja -C $CHROMEDRIVER_DIR electron:electron_chromedriver_zip
-      if [ "$TARGET_ARCH" == "arm" ] || [ "$TARGET_ARCH" == "arm64" ]; then
-        cp out/chromedriver/chromedriver.zip out/Default
-      fi
-
-step-electron-chromedriver-store: &step-electron-chromedriver-store
-  store_artifacts:
-    path: src/out/Default/chromedriver.zip
-    destination: chromedriver.zip
-
-step-nodejs-headers-build: &step-nodejs-headers-build
-  run:
-    name: Build Node.js headers
-    command: |
-      cd src
-      ninja -C out/Default third_party/electron_node:headers
-
-step-nodejs-headers-store: &step-nodejs-headers-store
-  store_artifacts:
-    path: src/out/Default/gen/node_headers.tar.gz
-    destination: node_headers.tar.gz
-
-step-native-unittests-store: &step-native-unittests-store
-  store_artifacts:
-    path: src/out/Default/shell_browser_ui_unittests
-    destination: shell_browser_ui_unittests
-
-step-electron-publish: &step-electron-publish
-  run:
-    name: Publish Electron Dist
-    command: |
-      if [ "`uname`" == "Darwin" ]; then
-        rm -rf src/out/Default/obj
-      fi
-
-      cd src/electron
-      if [ "$UPLOAD_TO_S3" == "1" ]; then
-        echo 'Uploading Electron release distribution to S3'
-        script/release/uploaders/upload.py --verbose --upload_to_s3
-      else
-        echo 'Uploading Electron release distribution to Github releases'
-        script/release/uploaders/upload.py --verbose
-      fi
-
-step-persist-data-for-tests: &step-persist-data-for-tests
-  persist_to_workspace:
-    root: .
-    paths:
-      # Build artifacts
-      - src/out/Default/dist.zip
-      - src/out/Default/mksnapshot.zip
-      - src/out/Default/chromedriver.zip
-      - src/out/Default/shell_browser_ui_unittests
-      - src/out/Default/gen/node_headers
-      - src/out/ffmpeg/ffmpeg.zip
-      - src/electron
-      - src/third_party/electron_node
-      - src/third_party/nan
-      - src/cross-arch-snapshots
-
-step-electron-dist-unzip: &step-electron-dist-unzip
-  run:
-    name: Unzip dist.zip
-    command: |
-      cd src/out/Default
-      # -o  overwrite files WITHOUT prompting
-      # TODO(alexeykuzmin): Remove '-o' when it's no longer needed.
-      # -: allows to extract archive members into  locations  outside
-      #    of the current ``extraction root folder''.
-      #    ASan builds have the llvm-symbolizer binaries listed as
-      #    runtime_deps, with their paths as `../../third_party/...`
-      #    unzip exits with non-zero code on such zip files unless -: is
-      #    passed.
-      unzip -:o dist.zip
-
-step-ffmpeg-unzip: &step-ffmpeg-unzip
-  run:
-    name: Unzip ffmpeg.zip
-    command: |
-      cd src/out/ffmpeg
-      unzip -:o ffmpeg.zip
-
-step-mksnapshot-unzip: &step-mksnapshot-unzip
-  run:
-    name: Unzip mksnapshot.zip
-    command: |
-      cd src/out/Default
-      unzip -:o mksnapshot.zip
-
-step-chromedriver-unzip: &step-chromedriver-unzip
-  run:
-    name: Unzip chromedriver.zip
-    command: |
-      cd src/out/Default
-      unzip -:o chromedriver.zip
-
-step-ffmpeg-gn-gen: &step-ffmpeg-gn-gen
-  run:
-    name: ffmpeg GN gen
-    command: |
-      cd src
-      gn gen out/ffmpeg --args="import(\"//electron/build/args/ffmpeg.gn\") import(\"$GN_GOMA_FILE\") $GN_EXTRA_ARGS"
-
-step-ffmpeg-build: &step-ffmpeg-build
-  run:
-    name: Non proprietary ffmpeg build
-    command: |
-      cd src
-      ninja -C out/ffmpeg electron:electron_ffmpeg_zip -j $NUMBER_OF_NINJA_PROCESSES
-
-step-verify-ffmpeg: &step-verify-ffmpeg
-  run:
-    name: Verify ffmpeg
-    command: |
-      cd src
-      python electron/script/verify-ffmpeg.py --source-root "$PWD" --build-dir out/Default --ffmpeg-path out/ffmpeg
-
-step-ffmpeg-store: &step-ffmpeg-store
-  store_artifacts:
-    path: src/out/ffmpeg/ffmpeg.zip
-    destination: ffmpeg.zip
-
-step-verify-mksnapshot: &step-verify-mksnapshot
-  run:
-    name: Verify mksnapshot
-    command: |
-      if [ "$IS_ASAN" != "1" ]; then
-        cd src
-        if  [ "$TARGET_ARCH" == "arm64" ] &&[ "`uname`" == "Darwin" ]; then
-          python electron/script/verify-mksnapshot.py --source-root "$PWD" --build-dir out/Default --snapshot-files-dir $PWD/cross-arch-snapshots
-        else
-          python electron/script/verify-mksnapshot.py --source-root "$PWD" --build-dir out/Default
-        fi
-      fi
-
-step-verify-chromedriver: &step-verify-chromedriver
-  run:
-    name: Verify ChromeDriver
-    command: |
-      if [ "$IS_ASAN" != "1" ]; then
-        cd src
-        python electron/script/verify-chromedriver.py --source-root "$PWD" --build-dir out/Default
-      fi
-
-step-setup-linux-for-headless-testing: &step-setup-linux-for-headless-testing
-  run:
-    name: Setup for headless testing
-    command: |
-      if [ "`uname`" != "Darwin" ]; then
-        sh -e /etc/init.d/xvfb start
-      fi
-
-step-show-goma-stats: &step-show-goma-stats
-  run:
-    shell: /bin/bash
-    name: Check goma stats after build
-    command: |      
-      set +e
-      set +o pipefail
-      $LOCAL_GOMA_DIR/goma_ctl.py stat
-      $LOCAL_GOMA_DIR/diagnose_goma_log.py
-      true
-    when: always
-
-step-mksnapshot-build: &step-mksnapshot-build
-  run:
-    name: mksnapshot build
-    command: |
-      cd src
-      if [ "$USE_PREBUILT_V8_CONTEXT_SNAPSHOT" != "1" ]; then
-        ninja -C out/Default electron:electron_mksnapshot -j $NUMBER_OF_NINJA_PROCESSES
-        gn desc out/Default v8:run_mksnapshot_default args > out/Default/mksnapshot_args
-      fi
-      if [ "`uname`" != "Darwin" ]; then
-        if [ "$TARGET_ARCH" == "arm" ]; then
-          electron/script/strip-binaries.py --file $PWD/out/Default/clang_x86_v8_arm/mksnapshot
-          electron/script/strip-binaries.py --file $PWD/out/Default/clang_x86_v8_arm/v8_context_snapshot_generator
-        elif [ "$TARGET_ARCH" == "arm64" ]; then
-          electron/script/strip-binaries.py --file $PWD/out/Default/clang_x64_v8_arm64/mksnapshot
-          electron/script/strip-binaries.py --file $PWD/out/Default/clang_x64_v8_arm64/v8_context_snapshot_generator
-        else
-          electron/script/strip-binaries.py --file $PWD/out/Default/mksnapshot
-          electron/script/strip-binaries.py --file $PWD/out/Default/v8_context_snapshot_generator
-        fi
-      fi
-      if [ "$USE_PREBUILT_V8_CONTEXT_SNAPSHOT" != "1" ] && [ "$SKIP_DIST_ZIP" != "1" ]; then
-        ninja -C out/Default electron:electron_mksnapshot_zip -j $NUMBER_OF_NINJA_PROCESSES
-        (cd out/Default; zip mksnapshot.zip mksnapshot_args gen/v8/embedded.S)
-      fi
-
-step-mksnapshot-store: &step-mksnapshot-store
-  store_artifacts:
-    path: src/out/Default/mksnapshot.zip
-    destination: mksnapshot.zip
-
-step-hunspell-build: &step-hunspell-build
-  run:
-    name: hunspell build
-    command: |
-      cd src
-      if [ "$SKIP_DIST_ZIP" != "1" ]; then
-        ninja -C out/Default electron:hunspell_dictionaries_zip -j $NUMBER_OF_NINJA_PROCESSES
-      fi
-
-step-hunspell-store: &step-hunspell-store
-  store_artifacts:
-    path: src/out/Default/hunspell_dictionaries.zip
-    destination: hunspell_dictionaries.zip
-
-step-maybe-generate-breakpad-symbols: &step-maybe-generate-breakpad-symbols
-  run:
-    name: Generate breakpad symbols
-    no_output_timeout: 30m
-    command: |
-      if [ "$GENERATE_SYMBOLS" == "true" ]; then
-        cd src
-        ninja -C out/Default electron:electron_symbols
-      fi
-
-step-maybe-zip-symbols: &step-maybe-zip-symbols
-  run:
-    name: Zip symbols
-    command: |
-      cd src
-      export BUILD_PATH="$PWD/out/Default"
-      ninja -C out/Default electron:licenses
-      ninja -C out/Default electron:electron_version
-      electron/script/zip-symbols.py -b $BUILD_PATH
-
-step-symbols-store: &step-symbols-store
-  store_artifacts:
-    path: src/out/Default/symbols.zip
-    destination: symbols.zip
-
-step-maybe-cross-arch-snapshot: &step-maybe-cross-arch-snapshot
-  run:
-    name: Generate cross arch snapshot (arm/arm64)
-    command: |
-      if [ "$GENERATE_CROSS_ARCH_SNAPSHOT" == "true" ] && [ -z "$CIRCLE_PR_NUMBER" ]; then
-        cd src
-        if [ "$TARGET_ARCH" == "arm" ]; then
-          export MKSNAPSHOT_PATH="clang_x86_v8_arm"
-        elif [ "$TARGET_ARCH" == "arm64" ]; then
-          export MKSNAPSHOT_PATH="clang_x64_v8_arm64"
-        fi
-        cp "out/Default/$MKSNAPSHOT_PATH/mksnapshot" out/Default        
-        cp "out/Default/$MKSNAPSHOT_PATH/v8_context_snapshot_generator" out/Default
-        if [ "`uname`" == "Linux" ]; then
-          cp "out/Default/$MKSNAPSHOT_PATH/libffmpeg.so" out/Default
-        elif [ "`uname`" == "Darwin" ]; then
-          cp "out/Default/$MKSNAPSHOT_PATH/libffmpeg.dylib" out/Default
-        fi
-        python electron/script/verify-mksnapshot.py --source-root "$PWD" --build-dir out/Default --create-snapshot-only
-        mkdir cross-arch-snapshots
-        cp out/Default-mksnapshot-test/*.bin cross-arch-snapshots
-      fi
-
-step-maybe-cross-arch-snapshot-store: &step-maybe-cross-arch-snapshot-store
-  store_artifacts:
-    path: src/cross-arch-snapshots
-    destination: cross-arch-snapshots
-
-step-maybe-trigger-arm-test: &step-maybe-trigger-arm-test
-  run:
-    name: Trigger an arm test on VSTS if applicable
-    command: |
-      cd src
-      # Only run for non-fork prs
-      if [ "$TRIGGER_ARM_TEST" == "true" ] && [ -z "$CIRCLE_PR_NUMBER" ]; then
-        #Trigger VSTS job, passing along CircleCI job number and branch to build
-        if [ "`uname`" == "Darwin" ]; then
-          if [ x"$MAS_BUILD" == x"true" ]; then
-            export DEVOPS_BUILD="electron-mas-arm64-testing"
-          else
-            export DEVOPS_BUILD="electron-osx-arm64-testing"
-          fi
-          echo "Triggering $DEVOPS_BUILD build on Azure DevOps"
-          node electron/script/release/ci-release-build.js --job=$DEVOPS_BUILD --ci=DevOps --armTest --circleBuildNum=$CIRCLE_BUILD_NUM $CIRCLE_BRANCH
-        else
-          echo "Triggering electron-$TARGET_ARCH-testing build on VSTS"  
-          node electron/script/release/ci-release-build.js --job=electron-$TARGET_ARCH-testing --ci=VSTS --armTest --circleBuildNum=$CIRCLE_BUILD_NUM $CIRCLE_BRANCH
-        fi
-      fi
-
-step-maybe-generate-typescript-defs: &step-maybe-generate-typescript-defs
-  run:
-    name: Generate type declarations
-    command: |
-      if [ "`uname`" == "Darwin" ]; then
-        cd src/electron
-        node script/yarn create-typescript-definitions
-      fi
-
-step-fix-known-hosts-linux: &step-fix-known-hosts-linux
-  run:
-    name: Fix Known Hosts on Linux
-    command: |
-      if [ "`uname`" == "Linux" ]; then
-        ./src/electron/.circleci/fix-known-hosts.sh
-      fi
-
-step-ninja-summary: &step-ninja-summary
-  run:
-    name: Print ninja summary
-    command: |
-      set +e
-      set +o pipefail
-      python depot_tools/post_build_ninja_summary.py -C src/out/Default || echo Ninja Summary Failed
-
-step-ninja-report: &step-ninja-report
-  store_artifacts:
-    path: src/out/Default/.ninja_log
-    destination: ninja_log
-
-# Checkout Steps
-step-generate-deps-hash: &step-generate-deps-hash
-  run:
-    name: Generate DEPS Hash
-    command: node src/electron/script/generate-deps-hash.js && cat src/electron/.depshash-target
-
-step-touch-sync-done: &step-touch-sync-done
-  run:
-    name: Touch Sync Done
-    command: touch src/electron/.circle-sync-done
-
-# Restore exact src cache based on the hash of DEPS and patches/*
-# If no cache is matched EXACTLY then the .circle-sync-done file is empty
-# If a cache is matched EXACTLY then the .circle-sync-done file contains "done"
-step-maybe-restore-src-cache: &step-maybe-restore-src-cache
-  restore_cache:
-    keys:
-      - v8-src-cache-{{ checksum "src/electron/.depshash" }}
-    name: Restoring src cache
-step-maybe-restore-src-cache-marker: &step-maybe-restore-src-cache-marker
-  restore_cache:
-    keys:
-      - v1-src-cache-marker-{{ checksum "src/electron/.depshash" }}
-    name: Restoring src cache marker
-
-# Restore exact or closest git cache based on the hash of DEPS and .circle-sync-done
-# If the src cache was restored above then this will match an empty cache
-# If the src cache was not restored above then this will match a close git cache
-step-maybe-restore-git-cache: &step-maybe-restore-git-cache
-  restore_cache:
-    paths:
-      - ~/.gclient-cache
-    keys:
-      - v2-gclient-cache-{{ checksum "src/electron/.circle-sync-done" }}-{{ checksum "src/electron/DEPS" }}
-      - v2-gclient-cache-{{ checksum "src/electron/.circle-sync-done" }}
-    name: Conditionally restoring git cache
-
-step-restore-out-cache: &step-restore-out-cache
-  restore_cache:
-    paths:
-      - ./src/out/Default
-    keys:
-      - v9-out-cache-{{ checksum "src/electron/.depshash" }}-{{ checksum "src/electron/.depshash-target" }}
-    name: Restoring out cache
-
-step-set-git-cache-path: &step-set-git-cache-path
-  run:
-    name: Set GIT_CACHE_PATH to make gclient to use the cache
-    command: |
-      # CircleCI does not support interpolation when setting environment variables.
-      # https://circleci.com/docs/2.0/env-vars/#setting-an-environment-variable-in-a-shell-command
-      echo 'export GIT_CACHE_PATH="$HOME/.gclient-cache"' >> $BASH_ENV
-
-# Persist the git cache based on the hash of DEPS and .circle-sync-done
-# If the src cache was restored above then this will persist an empty cache
-step-save-git-cache: &step-save-git-cache
-  save_cache:
-    paths:
-      - ~/.gclient-cache
-    key: v2-gclient-cache-{{ checksum "src/electron/.circle-sync-done" }}-{{ checksum "src/electron/DEPS" }}
-    name: Persisting git cache
-
-step-save-out-cache: &step-save-out-cache
-  save_cache:
-    paths:
-      - ./src/out/Default
-    key: v9-out-cache-{{ checksum "src/electron/.depshash" }}-{{ checksum "src/electron/.depshash-target" }}
-    name: Persisting out cache
-
-step-run-electron-only-hooks: &step-run-electron-only-hooks
-  run:
-    name: Run Electron Only Hooks
-    command: gclient runhooks --spec="solutions=[{'name':'src/electron','url':None,'deps_file':'DEPS','custom_vars':{'process_deps':False},'managed':False}]"
-
-step-generate-deps-hash-cleanly: &step-generate-deps-hash-cleanly
-  run:
-    name: Generate DEPS Hash
-    command: (cd src/electron && git checkout .) && node src/electron/script/generate-deps-hash.js && cat src/electron/.depshash-target
-
-# Mark the sync as done for future cache saving
-step-mark-sync-done: &step-mark-sync-done
-  run:
-    name: Mark Sync Done
-    command: echo DONE > src/electron/.circle-sync-done
-
-# Minimize the size of the cache
-step-minimize-workspace-size-from-checkout: &step-minimize-workspace-size-from-checkout
-  run:
-    name: Remove some unused data to avoid storing it in the workspace/cache
-    command: |
-      rm -rf src/android_webview
-      rm -rf src/ios/chrome
-      rm -rf src/third_party/blink/web_tests
-      rm -rf src/third_party/blink/perf_tests
-      rm -rf src/third_party/WebKit/LayoutTests
-      rm -rf third_party/electron_node/deps/openssl
-      rm -rf third_party/electron_node/deps/v8
-      rm -rf chrome/test/data/xr/webvr_info
-
-# Save the src cache based on the deps hash
-step-save-src-cache: &step-save-src-cache
-  save_cache:
-    paths:
-      - /var/portal
-    key: v8-src-cache-{{ checksum "/var/portal/src/electron/.depshash" }}
-    name: Persisting src cache
-step-make-src-cache-marker: &step-make-src-cache-marker
-  run:
-    name: Making src cache marker
-    command: touch .src-cache-marker
-step-save-src-cache-marker: &step-save-src-cache-marker
-  save_cache:
-    paths:
-      - .src-cache-marker
-    key: v1-src-cache-marker-{{ checksum "/var/portal/src/electron/.depshash" }}
-
-# Check for doc only change
-step-check-for-doc-only-change: &step-check-for-doc-only-change
-  run:
-    name: Check if commit is doc only change
-    command: |
-      cd src/electron
-      node script/yarn install --frozen-lockfile
-      if node script/doc-only-change.js --prNumber=$CIRCLE_PR_NUMBER --prURL=$CIRCLE_PULL_REQUEST --prBranch=$CIRCLE_BRANCH; then
-        #PR is doc only change; save file with value true to indicate doc only change
-        echo "true" > .skip-ci-build
-      else
-        #PR is not a doc only change; create empty file to indicate check has been done
-        touch .skip-ci-build
-      fi
-
-step-persist-doc-only-change: &step-persist-doc-only-change
-  persist_to_workspace:
-    root: .
-    paths:
-      - src/electron/.skip-ci-build
-
-step-maybe-early-exit-doc-only-change: &step-maybe-early-exit-doc-only-change
-  run:
-    name: Shortcircuit build if doc only change
-    command: |
-      if [ -s src/electron/.skip-ci-build ]; then
-        circleci-agent step halt
-      fi
-
-step-maybe-early-exit-no-doc-change: &step-maybe-early-exit-no-doc-change
-  run:
-    name: Shortcircuit job if change is not doc only
-    command: |
-      if [ ! -s src/electron/.skip-ci-build ]; then
-        circleci-agent step halt
-      fi
-
-step-ts-compile: &step-ts-compile
-  run:
-    name: Run TS/JS compile on doc only change
-    command: |
-      cd src
-      ninja -C out/Default electron:default_app_js -j $NUMBER_OF_NINJA_PROCESSES
-      ninja -C out/Default electron:electron_js2c -j $NUMBER_OF_NINJA_PROCESSES
-
-# Lists of steps.
-steps-lint: &steps-lint
-  steps:
-    - *step-checkout-electron
-    - run:
-        name: Setup third_party Depot Tools
-        command: |
-          # "depot_tools" has to be checkout into "//third_party/depot_tools" so pylint.py can a "pylintrc" file.
-          git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git src/third_party/depot_tools
-          echo 'export PATH="$PATH:'"$PWD"'/src/third_party/depot_tools"' >> $BASH_ENV
-    - run:
-        name: Download GN Binary
-        command: |
-          chromium_revision="$(grep -A1 chromium_version src/electron/DEPS | tr -d '\n' | cut -d\' -f4)"
-          gn_version="$(curl -sL "https://chromium.googlesource.com/chromium/src/+/${chromium_revision}/DEPS?format=TEXT" | base64 -d | grep gn_version | head -n1 | cut -d\' -f4)"
-
-          cipd ensure -ensure-file - -root . \<<-CIPD
-          \$ServiceURL https://chrome-infra-packages.appspot.com/
-          @Subdir src/buildtools/linux64
-          gn/gn/linux-amd64 $gn_version
-          CIPD
-
-          echo 'export CHROMIUM_BUILDTOOLS_PATH="'"$PWD"'/src/buildtools"' >> $BASH_ENV
-    - run:
-        name: Download clang-format Binary
-        command: |
-          chromium_revision="$(grep -A1 chromium_version src/electron/DEPS | tr -d '\n' | cut -d\' -f4)"
-
-          sha1_path='buildtools/linux64/clang-format.sha1'
-          curl -sL "https://chromium.googlesource.com/chromium/src/+/${chromium_revision}/${sha1_path}?format=TEXT" | base64 -d > "src/${sha1_path}"
-
-          download_from_google_storage.py --no_resume --no_auth --bucket chromium-clang-format -s "src/${sha1_path}"
-    - run:
-        name: Run Lint
-        command: |
-          # gn.py tries to find a gclient root folder starting from the current dir.
-          # When it fails and returns "None" path, the whole script fails. Let's "fix" it.
-          touch .gclient
-          # Another option would be to checkout "buildtools" inside the Electron checkout,
-          # but then we would lint its contents (at least gn format), and it doesn't pass it.
-
-          cd src/electron
-          node script/yarn install --frozen-lockfile
-          node script/yarn lint
-    - run:
-        name: Run Script Typechecker
-        command: |
-          cd src/electron
-          node script/yarn tsc -p tsconfig.script.json
-
-steps-checkout-and-save-cache: &steps-checkout-and-save-cache
-  steps:
-    - *step-checkout-electron
-    - *step-check-for-doc-only-change
-    - *step-persist-doc-only-change
-    - *step-maybe-early-exit-doc-only-change
-    - *step-depot-tools-get
-    - *step-depot-tools-add-to-path
-    - *step-restore-brew-cache
-    - *step-get-more-space-on-mac
-    - *step-install-gnutar-on-mac
-
-    - *step-generate-deps-hash
-    - *step-touch-sync-done
-    - maybe-restore-portaled-src-cache:
-        halt-if-successful: true
-    - *step-maybe-restore-git-cache
-    - *step-set-git-cache-path
-    # This sync call only runs if .circle-sync-done is an EMPTY file
-    - *step-gclient-sync
-    - store_artifacts:
-        path: patches
-    - *step-save-git-cache
-    # These next few steps reset Electron to the correct commit regardless of which cache was restored
-    - run:
-        name: Wipe Electron
-        command: rm -rf src/electron
-    - *step-checkout-electron
-    - *step-run-electron-only-hooks
-    - *step-generate-deps-hash-cleanly
-    - *step-mark-sync-done
-    - *step-minimize-workspace-size-from-checkout
-    - *step-delete-git-directories
-    - run:
-        name: Move src folder to the cross-OS portal
-        command: |
-          sudo mkdir -p /var/portal
-          sudo chown -R $(id -u):$(id -g) /var/portal
-          mv ./src /var/portal
-    - *step-save-src-cache
-    - *step-make-src-cache-marker
-    - *step-save-src-cache-marker
-
-steps-electron-gn-check: &steps-electron-gn-check
-  steps:
-    - attach_workspace:
-        at: .
-    - *step-maybe-early-exit-doc-only-change
-    - *step-depot-tools-add-to-path
-    - *step-setup-env-for-build
-    - *step-setup-goma-for-build
-    - *step-gn-gen-default
-    - *step-gn-check
-
-steps-electron-ts-compile-for-doc-change: &steps-electron-ts-compile-for-doc-change
-  steps:
-    # Checkout - Copied ffrom steps-checkout
-    - *step-checkout-electron
-    - *step-check-for-doc-only-change
-    - *step-maybe-early-exit-no-doc-change
-    - *step-depot-tools-get
-    - *step-depot-tools-add-to-path
-    - *step-restore-brew-cache
-    - *step-install-gnutar-on-mac
-    - *step-get-more-space-on-mac
-    - *step-generate-deps-hash
-    - *step-touch-sync-done
-    - maybe-restore-portaled-src-cache
-    - *step-maybe-restore-git-cache
-    - *step-set-git-cache-path
-    # This sync call only runs if .circle-sync-done is an EMPTY file
-    - *step-gclient-sync
-    # These next few steps reset Electron to the correct commit regardless of which cache was restored
-    - run:
-        name: Wipe Electron
-        command: rm -rf src/electron
-    - *step-checkout-electron
-    - *step-run-electron-only-hooks
-    - *step-generate-deps-hash-cleanly
-    - *step-mark-sync-done
-    - *step-minimize-workspace-size-from-checkout
-
-    - *step-depot-tools-add-to-path
-    - *step-setup-env-for-build
-    - *step-setup-goma-for-build
-    - *step-get-more-space-on-mac
-    - *step-install-npm-deps-on-mac
-    - *step-fix-sync-on-mac
-    - *step-gn-gen-default
-
-    #Compile ts/js to verify doc change didn't break anything
-    - *step-ts-compile
-
-steps-native-tests: &steps-native-tests
-  steps:
-    - attach_workspace:
-        at: .
-    - *step-depot-tools-add-to-path
-    - *step-setup-env-for-build
-    - *step-setup-goma-for-build
-    - *step-gn-gen-default
-
-    - run:
-        name: Build tests
-        command: |
-          cd src
-          ninja -C out/Default $BUILD_TARGET
-    - *step-show-goma-stats
-
-    - *step-setup-linux-for-headless-testing
-    - run:
-        name: Run tests
-        command: |
-          mkdir test_results
-          python src/electron/script/native-tests.py run \
-            --config $TESTS_CONFIG \
-            --tests-dir src/out/Default \
-            --output-dir test_results  \
-            $TESTS_ARGS
-
-    - store_artifacts:
-        path: test_results
-        destination: test_results  # Put it in the root folder.
-    - store_test_results:
-        path: test_results
-
-steps-verify-ffmpeg: &steps-verify-ffmpeg
-  steps:
-    - attach_workspace:
-        at: .
-    - *step-depot-tools-add-to-path
-    - *step-electron-dist-unzip
-    - *step-ffmpeg-unzip
-    - *step-setup-linux-for-headless-testing
-
-    - *step-verify-ffmpeg
-    - *step-maybe-notify-slack-failure
-
-steps-tests: &steps-tests
-  steps:
-    - attach_workspace:
-        at: .
-    - *step-maybe-early-exit-doc-only-change
-    - *step-depot-tools-add-to-path
-    - *step-electron-dist-unzip
-    - *step-mksnapshot-unzip
-    - *step-chromedriver-unzip
-    - *step-setup-linux-for-headless-testing
-    - *step-restore-brew-cache
-    - *step-fix-known-hosts-linux
-    - *step-install-signing-cert-on-mac
-
-    - run:
-        name: Run Electron tests
-        environment:
-          MOCHA_REPORTER: mocha-multi-reporters
-          ELECTRON_TEST_RESULTS_DIR: junit
-          MOCHA_MULTI_REPORTERS: mocha-junit-reporter, tap
-          ELECTRON_DISABLE_SECURITY_WARNINGS: 1
-        command: |
-          cd src
-          if [ "$IS_ASAN" == "1" ]; then
-            ASAN_SYMBOLIZE="$PWD/tools/valgrind/asan/asan_symbolize.py --executable-path=$PWD/out/Default/electron"
-            export ASAN_OPTIONS="symbolize=0 handle_abort=1"
-            export G_SLICE=always-malloc
-            export NSS_DISABLE_ARENA_FREE_LIST=1
-            export NSS_DISABLE_UNLOAD=1
-            export LLVM_SYMBOLIZER_PATH=$PWD/third_party/llvm-build/Release+Asserts/bin/llvm-symbolizer
-            export MOCHA_TIMEOUT=180000
-            echo "Piping output to ASAN_SYMBOLIZE ($ASAN_SYMBOLIZE)"
-            (cd electron && node script/yarn test --runners=main --trace-uncaught --enable-logging --files $(circleci tests glob spec-main/*-spec.ts | circleci tests split)) 2>&1 | $ASAN_SYMBOLIZE
-            (cd electron && node script/yarn test --runners=remote --trace-uncaught --enable-logging --files $(circleci tests glob spec/*-spec.js | circleci tests split)) 2>&1 | $ASAN_SYMBOLIZE
-          else
-            if  [ "$TARGET_ARCH" == "arm64" ] &&[ "`uname`" == "Darwin" ]; then
-              export ELECTRON_SKIP_NATIVE_MODULE_TESTS=true
-              (cd electron && node script/yarn test --runners=main --trace-uncaught --enable-logging)
-              (cd electron && node script/yarn test --runners=remote --trace-uncaught --enable-logging)
-            else
-              (cd electron && node script/yarn test --runners=main --trace-uncaught --enable-logging --files $(circleci tests glob spec-main/*-spec.ts | circleci tests split))
-              (cd electron && node script/yarn test --runners=remote --trace-uncaught --enable-logging --files $(circleci tests glob spec/*-spec.js | circleci tests split))
-            fi
-          fi
-    - run:
-        name: Check test results existence
-        command: |
-          cd src
-
-          # Check if test results exist and are not empty.
-          if [ ! -s "junit/test-results-remote.xml" ]; then
-            exit 1
-          fi
-          if [ ! -s "junit/test-results-main.xml" ]; then
-            exit 1
-          fi
-    - store_test_results:
-        path: src/junit
-
-    - *step-verify-mksnapshot
-    - *step-verify-chromedriver
-
-    - *step-maybe-notify-slack-failure
-
-    - *step-maybe-cleanup-arm64-mac
-
-steps-test-nan: &steps-test-nan
-  steps:
-    - attach_workspace:
-          at: .
-    - *step-maybe-early-exit-doc-only-change
-    - *step-depot-tools-add-to-path
-    - *step-electron-dist-unzip
-    - *step-setup-linux-for-headless-testing
-    - *step-fix-known-hosts-linux
-    - run:
-        name: Run Nan Tests
-        command: |
-          cd src
-          node electron/script/nan-spec-runner.js
-
-steps-test-node: &steps-test-node
-  steps:
-    - attach_workspace:
-          at: .
-    - *step-maybe-early-exit-doc-only-change
-    - *step-depot-tools-add-to-path
-    - *step-electron-dist-unzip
-    - *step-setup-linux-for-headless-testing
-    - *step-fix-known-hosts-linux
-    - run:
-        name: Run Node Tests
-        command: |
-          cd src
-          node electron/script/node-spec-runner.js --default --jUnitDir=junit
-    - store_test_results:
-        path: src/junit
-
-chromium-upgrade-branches: &chromium-upgrade-branches
-  /chromium\-upgrade\/[0-9]+/
-
-# Command Aliases
-commands:
-  maybe-restore-portaled-src-cache:
-    parameters:
-      halt-if-successful:
-        type: boolean
-        default: false
-    steps:
-      - run:
-          name: Prepare for cross-OS sync restore
-          command: |
-            sudo mkdir -p /var/portal
-            sudo chown -R $(id -u):$(id -g) /var/portal
-      - when:
-          condition: << parameters.halt-if-successful >>
-          steps:
-            - *step-maybe-restore-src-cache-marker
-            - run:
-                name: Halt the job early if the src cache exists
-                command: |
-                  if [ -f ".src-cache-marker" ]; then
-                    circleci-agent step halt
-                  fi
-      - *step-maybe-restore-src-cache
-      - run:
-          name: Fix the src cache restore point on macOS
-          command: |
-            if [ -d "/var/portal/src" ]; then
-              echo Relocating Cache
-              rm -rf src
-              mv /var/portal/src ./
-            fi
-  checkout-from-cache:
-    steps:
-      - *step-checkout-electron
-      - *step-maybe-early-exit-doc-only-change
-      - *step-depot-tools-get
-      - *step-depot-tools-add-to-path
-      - *step-generate-deps-hash
-      - maybe-restore-portaled-src-cache
-      - run:
-          name: Ensure src checkout worked
-          command: |
-            if [ ! -d "src/third_party/blink" ]; then
-              echo src cache was not restored for some reason, idk what happened here...
-              exit 1
-            fi
-      - run:
-          name: Wipe Electron
-          command: rm -rf src/electron
-      - *step-checkout-electron
-      - *step-run-electron-only-hooks
-      - *step-generate-deps-hash-cleanly
-  electron-build:
-    parameters:
-      attach:
-        type: boolean
-        default: false
-      persist:
-        type: boolean
-        default: true
-      persist-checkout:
-        type: boolean
-        default: false
-      checkout:
-        type: boolean
-        default: true
-      checkout-and-assume-cache:
-        type: boolean
-        default: false
-      build:
-        type: boolean
-        default: true
-      use-out-cache:
-        type: boolean
-        default: true
-      restore-src-cache:
-        type: boolean
-        default: true
-      build-nonproprietary-ffmpeg:
-        type: boolean
-        default: true
-    steps:
-      - when:
-          condition: << parameters.attach >>
-          steps:
-            - attach_workspace:
-                at: .
-      - *step-restore-brew-cache
-      - *step-install-gnutar-on-mac
-      - *step-save-brew-cache
-      - when:
-          condition: << parameters.checkout-and-assume-cache >>
-          steps:
-            - checkout-from-cache
-      - when:
-          condition: << parameters.checkout >>
-          steps:
-            # Checkout - Copied ffrom steps-checkout
-            - *step-checkout-electron
-            - *step-check-for-doc-only-change
-            - *step-persist-doc-only-change
-            - *step-maybe-early-exit-doc-only-change
-            - *step-depot-tools-get
-            - *step-depot-tools-add-to-path
-            - *step-get-more-space-on-mac
-            - *step-generate-deps-hash
-            - *step-touch-sync-done
-            - when:
-                condition: << parameters.restore-src-cache >>
-                steps:
-                  - maybe-restore-portaled-src-cache
-            - *step-maybe-restore-git-cache
-            - *step-set-git-cache-path
-            # This sync call only runs if .circle-sync-done is an EMPTY file
-            - *step-gclient-sync
-            - store_artifacts:
-                path: patches
-            # These next few steps reset Electron to the correct commit regardless of which cache was restored
-            - run:
-                name: Wipe Electron
-                command: rm -rf src/electron
-            - *step-checkout-electron
-            - *step-run-electron-only-hooks
-            - *step-generate-deps-hash-cleanly
-            - *step-mark-sync-done
-            - *step-minimize-workspace-size-from-checkout
-            - when:
-                condition: << parameters.persist-checkout >>
-                steps:
-                  - persist_to_workspace:
-                      root: .
-                      paths:
-                        - depot_tools
-                        - src
-
-      - when:
-          condition: << parameters.build >>
-          steps:
-            - *step-depot-tools-add-to-path
-            - *step-setup-env-for-build
-            - *step-setup-goma-for-build
-            - *step-get-more-space-on-mac
-            - *step-fix-sync-on-mac
-            - *step-delete-git-directories
-
-            # Electron app
-            - when:
-                condition: << parameters.use-out-cache >>
-                steps:
-                  - *step-restore-out-cache
-            - *step-gn-gen-default
-            - *step-electron-build
-            - *step-ninja-summary
-            - *step-ninja-report
-            - *step-maybe-electron-dist-strip
-            - *step-electron-dist-build
-            - *step-electron-dist-store
-
-            # Native test targets
-            - *step-native-unittests-build
-            - *step-native-unittests-store
-
-            # Node.js headers
-            - *step-nodejs-headers-build
-            - *step-nodejs-headers-store
-
-            - *step-show-goma-stats
-
-            # mksnapshot
-            - *step-mksnapshot-build
-            - *step-mksnapshot-store
-            - *step-maybe-cross-arch-snapshot
-            - *step-maybe-cross-arch-snapshot-store
-
-            # chromedriver
-            - *step-electron-maybe-chromedriver-gn-gen
-            - *step-electron-chromedriver-build
-            - *step-electron-chromedriver-store
-
-            - when:
-                condition: << parameters.build-nonproprietary-ffmpeg >>
-                steps:
-                  # ffmpeg
-                  - *step-ffmpeg-gn-gen
-                  - *step-ffmpeg-build
-                  - *step-ffmpeg-store
-
-            # hunspell
-            - *step-hunspell-build
-            - *step-hunspell-store
-
-      # Save all data needed for a further tests run.
-      - when:
-          condition: << parameters.persist >>
-          steps:
-            - *step-persist-data-for-tests
-
-      - when:
-          condition: << parameters.build >>
-          steps:
-            - *step-maybe-generate-breakpad-symbols
-            - *step-maybe-zip-symbols
-            - *step-symbols-store
-
-      - when:
-          condition: << parameters.build >>
-          steps:
-            - run:
-                name: Remove the big things on macOS, this seems to be better on average
-                command: |
-                  if [ "`uname`" == "Darwin" ]; then
-                    mkdir -p src/out/Default
-                    cd src/out/Default
-                    find . -type f -size +50M -delete
-                    mkdir -p gen/electron
-                    cd gen/electron
-                    # These files do not seem to like being in a cache, let us remove them
-                    find . -type f -name '*_pkg_info' -delete
-                  fi
-            - when:
-                condition: << parameters.use-out-cache >>
-                steps:
-                  - *step-save-out-cache
-
-            # Trigger tests on arm hardware if needed
-            - *step-maybe-trigger-arm-test
-
-            - *step-maybe-notify-slack-failure
-
-  electron-publish:
-    parameters:
-      attach:
-        type: boolean
-        default: false
-      checkout:
-        type: boolean
-        default: true
-    steps:
-      - when:
-          condition: << parameters.attach >>
-          steps:
-            - attach_workspace:
-                at: .
-      - when:
-          condition: << parameters.checkout >>
-          steps:
-            - *step-depot-tools-get
-      - *step-depot-tools-add-to-path
-      - *step-restore-brew-cache
-      - *step-get-more-space-on-mac
-      - when:
-          condition: << parameters.checkout >>
-          steps:
-            - *step-checkout-electron
-            - *step-gclient-sync
-            - *step-delete-git-directories
-            - *step-minimize-workspace-size-from-checkout
-      - *step-fix-sync-on-mac
-      - *step-setup-env-for-build
-      - *step-setup-goma-for-build
-      - *step-gn-gen-default
-
-      # Electron app
-      - *step-electron-build
-      - *step-show-goma-stats
-      - *step-maybe-generate-breakpad-symbols
-      - *step-maybe-electron-dist-strip
-      - *step-electron-dist-build
-      - *step-electron-dist-store
-      - *step-maybe-zip-symbols
-      - *step-symbols-store
-
-      # mksnapshot
-      - *step-mksnapshot-build
-      - *step-mksnapshot-store
-
-      # chromedriver
-      - *step-electron-maybe-chromedriver-gn-gen
-      - *step-electron-chromedriver-build
-      - *step-electron-chromedriver-store
-
-      # Node.js headers
-      - *step-nodejs-headers-build
-      - *step-nodejs-headers-store
-
-      # ffmpeg
-      - *step-ffmpeg-gn-gen
-      - *step-ffmpeg-build
-      - *step-ffmpeg-store
-
-      # hunspell
-      - *step-hunspell-build
-      - *step-hunspell-store
-
-      # typescript defs
-      - *step-maybe-generate-typescript-defs
-
-      # Publish
-      - *step-electron-publish      
-
-# List of all jobs.
-jobs:
-  # Layer 0: Lint. Standalone.
-  lint:
-    <<: *machine-linux-medium
-    environment:
-      <<: *env-linux-medium
-    <<: *steps-lint
-
-  ts-compile-doc-change:
-    <<: *machine-linux-medium
-    environment:
-      <<: *env-linux-medium
-      <<: *env-testing-build
-    <<: *steps-electron-ts-compile-for-doc-change
-
-  # Layer 1: Checkout.
-  linux-checkout:
-    <<: *machine-linux-2xlarge
-    environment:
-      <<: *env-linux-2xlarge
-      GCLIENT_EXTRA_ARGS: '--custom-var=checkout_arm=True --custom-var=checkout_arm64=True'
-    steps:
-      - electron-build:
-          persist: false
-          build: false
-          checkout: true
-          persist-checkout: true
-          restore-src-cache: false
-
-  linux-checkout-fast:
-    <<: *machine-linux-2xlarge
-    environment:
-      <<: *env-linux-2xlarge
-      GCLIENT_EXTRA_ARGS: '--custom-var=checkout_arm=True --custom-var=checkout_arm64=True'
-    steps:
-      - electron-build:
-          persist: false
-          build: false
-          checkout: true
-          persist-checkout: true
-
-  linux-checkout-and-save-cache:
-    <<: *machine-linux-2xlarge
-    environment:
-      <<: *env-linux-2xlarge
-      GCLIENT_EXTRA_ARGS: '--custom-var=checkout_arm=True --custom-var=checkout_arm64=True'
-    <<: *steps-checkout-and-save-cache
-
-  linux-checkout-for-native-tests:
-    <<: *machine-linux-2xlarge
-    environment:
-      <<: *env-linux-2xlarge
-      GCLIENT_EXTRA_ARGS: '--custom-var=checkout_pyyaml=True'
-    steps:
-      - electron-build:
-          persist: false
-          build: false
-          checkout: true
-          persist-checkout: true
-
-  linux-checkout-for-native-tests-with-no-patches:
-    <<: *machine-linux-2xlarge
-    environment:
-      <<: *env-linux-2xlarge
-      GCLIENT_EXTRA_ARGS: '--custom-var=apply_patches=False --custom-var=checkout_pyyaml=True'
-    steps:
-      - electron-build:
-          persist: false
-          build: false
-          checkout: true
-          persist-checkout: true
-
-  mac-checkout:
-    <<: *machine-linux-2xlarge
-    environment:
-      <<: *env-linux-2xlarge
-      <<: *env-testing-build
-      <<: *env-macos-build
-      GCLIENT_EXTRA_ARGS: '--custom-var=checkout_mac=True --custom-var=host_os=mac'
-    steps:
-      - electron-build:
-          persist: false
-          build: false
-          checkout: true
-          persist-checkout: true
-          restore-src-cache: false
-
-  mac-checkout-fast:
-    <<: *machine-linux-2xlarge
-    environment:
-      <<: *env-linux-2xlarge
-      <<: *env-testing-build
-      <<: *env-macos-build
-      GCLIENT_EXTRA_ARGS: '--custom-var=checkout_mac=True --custom-var=host_os=mac'
-    steps:
-      - electron-build:
-          persist: false
-          build: false
-          checkout: true
-          persist-checkout: true
-
-  mac-checkout-and-save-cache:
-    <<: *machine-linux-2xlarge
-    environment:
-      <<: *env-linux-2xlarge
-      <<: *env-testing-build
-      <<: *env-macos-build
-      GCLIENT_EXTRA_ARGS: '--custom-var=checkout_mac=True --custom-var=host_os=mac'
-    <<: *steps-checkout-and-save-cache
-
-  # Layer 2: Builds.
-  linux-x64-testing:
-    <<: *machine-linux-2xlarge
-    environment:
-      <<: *env-global
-      <<: *env-testing-build
-      <<: *env-ninja-status
-      GCLIENT_EXTRA_ARGS: '--custom-var=checkout_arm=True --custom-var=checkout_arm64=True'
-    steps:
-      - electron-build:
-          persist: true
-          checkout: true
-          use-out-cache: false
-
-  linux-x64-testing-asan:
-    <<: *machine-linux-2xlarge
-    environment:
-      <<: *env-global
-      <<: *env-testing-build
-      <<: *env-ninja-status
-      CHECK_DIST_MANIFEST: '0'
-      GCLIENT_EXTRA_ARGS: '--custom-var=checkout_arm=True --custom-var=checkout_arm64=True'
-      GN_EXTRA_ARGS: 'is_asan = true'
-    steps:
-      - electron-build:
-          persist: true
-          checkout: true
-          use-out-cache: false
-          build-nonproprietary-ffmpeg: false
-
-  linux-x64-testing-no-run-as-node:
-    <<: *machine-linux-2xlarge
-    environment:
-      <<: *env-linux-2xlarge
-      <<: *env-testing-build
-      <<: *env-ninja-status
-      <<: *env-disable-run-as-node
-      GCLIENT_EXTRA_ARGS: '--custom-var=checkout_arm=True --custom-var=checkout_arm64=True'
-    steps:
-      - electron-build:
-          persist: false
-          checkout: true
-          use-out-cache: false
-
-  linux-x64-testing-gn-check:
-    <<: *machine-linux-medium
-    environment:
-      <<: *env-linux-medium
-      <<: *env-testing-build
-    <<: *steps-electron-gn-check
-
-  linux-x64-release:
-    <<: *machine-linux-2xlarge
-    environment:
-      <<: *env-linux-2xlarge-release
-      <<: *env-release-build
-      <<: *env-send-slack-notifications
-      <<: *env-ninja-status
-      GCLIENT_EXTRA_ARGS: '--custom-var=checkout_arm=True --custom-var=checkout_arm64=True'
-    steps:
-      - electron-build:
-          persist: true
-          checkout: true
-
-  linux-x64-publish:
-    <<: *machine-linux-2xlarge
-    environment:
-      <<: *env-linux-2xlarge-release
-      <<: *env-release-build
-      UPLOAD_TO_S3: << pipeline.parameters.upload-to-s3 >>
-      <<: *env-ninja-status
-    steps:
-      - electron-publish:
-          attach: false
-          checkout: true
-
-  linux-x64-publish-skip-checkout:
-    <<: *machine-linux-2xlarge
-    environment:
-      <<: *env-linux-2xlarge-release
-      <<: *env-release-build
-      UPLOAD_TO_S3: << pipeline.parameters.upload-to-s3 >>
-      <<: *env-ninja-status
-    steps:
-      - electron-publish:
-          attach: true
-          checkout: false
-
-  linux-ia32-testing:
-    <<: *machine-linux-2xlarge
-    environment:
-      <<: *env-global
-      <<: *env-ia32
-      <<: *env-testing-build
-      <<: *env-ninja-status
-      GCLIENT_EXTRA_ARGS: '--custom-var=checkout_arm=True --custom-var=checkout_arm64=True'
-    steps:
-      - electron-build:
-          persist: true
-          checkout: true
-          use-out-cache: false
-
-  linux-ia32-release:
-    <<: *machine-linux-2xlarge
-    environment:
-      <<: *env-linux-2xlarge-release
-      <<: *env-ia32
-      <<: *env-release-build
-      <<: *env-send-slack-notifications
-      <<: *env-ninja-status
-      GCLIENT_EXTRA_ARGS: '--custom-var=checkout_arm=True --custom-var=checkout_arm64=True'
-    steps:
-      - electron-build:
-          persist: true
-          checkout: true
-
-  linux-ia32-publish:
-    <<: *machine-linux-2xlarge
-    environment:
-      <<: *env-linux-2xlarge-release
-      <<: *env-ia32
-      <<: *env-release-build
-      <<: *env-32bit-release
-      UPLOAD_TO_S3: << pipeline.parameters.upload-to-s3 >>
-      <<: *env-ninja-status
-    steps:
-      - electron-publish:
-          attach: false
-          checkout: true
-
-  linux-ia32-publish-skip-checkout:
-    <<: *machine-linux-2xlarge
-    environment:
-      <<: *env-linux-2xlarge-release
-      <<: *env-ia32
-      <<: *env-release-build
-      <<: *env-32bit-release
-      UPLOAD_TO_S3: << pipeline.parameters.upload-to-s3 >>
-      <<: *env-ninja-status
-    steps:
-      - electron-publish:
-          attach: true
-          checkout: false
-
-  linux-arm-testing:
-    <<: *machine-linux-2xlarge
-    environment:
-      <<: *env-global
-      <<: *env-arm
-      <<: *env-testing-build
-      <<: *env-ninja-status
-      TRIGGER_ARM_TEST: true
-      GENERATE_CROSS_ARCH_SNAPSHOT: true
-      GCLIENT_EXTRA_ARGS: '--custom-var=checkout_arm=True --custom-var=checkout_arm64=True'
-    steps:
-      - electron-build:
-          persist: false
-          checkout: true
-          use-out-cache: false
-
-  linux-arm-release:
-    <<: *machine-linux-2xlarge
-    environment:
-      <<: *env-linux-2xlarge-release
-      <<: *env-arm
-      <<: *env-release-build
-      <<: *env-send-slack-notifications
-      <<: *env-ninja-status
-      GCLIENT_EXTRA_ARGS: '--custom-var=checkout_arm=True --custom-var=checkout_arm64=True'
-    steps:
-      - electron-build:
-          persist: false
-          checkout: true
-
-  linux-arm-publish:
-    <<: *machine-linux-2xlarge
-    environment:
-      <<: *env-linux-2xlarge-release
-      <<: *env-arm
-      <<: *env-release-build
-      <<: *env-32bit-release
-      GCLIENT_EXTRA_ARGS: '--custom-var=checkout_arm=True'
-      UPLOAD_TO_S3: << pipeline.parameters.upload-to-s3 >>
-      <<: *env-ninja-status
-    steps:
-      - electron-publish:
-          attach: false
-          checkout: true
-
-  linux-arm-publish-skip-checkout:
-    <<: *machine-linux-2xlarge
-    environment:
-      <<: *env-linux-2xlarge-release
-      <<: *env-arm
-      <<: *env-release-build
-      <<: *env-32bit-release
-      UPLOAD_TO_S3: << pipeline.parameters.upload-to-s3 >>
-      <<: *env-ninja-status
-    steps:
-      - electron-publish:
-          attach: true
-          checkout: false
-
-  linux-arm64-testing:
-    <<: *machine-linux-2xlarge
-    environment:
-      <<: *env-global
-      <<: *env-arm64
-      <<: *env-testing-build
-      <<: *env-ninja-status
-      TRIGGER_ARM_TEST: true
-      GENERATE_CROSS_ARCH_SNAPSHOT: true
-      GCLIENT_EXTRA_ARGS: '--custom-var=checkout_arm=True --custom-var=checkout_arm64=True'
-    steps:
-      - electron-build:
-          persist: false
-          checkout: true
-          use-out-cache: false
-
-  linux-arm64-testing-gn-check:
-    <<: *machine-linux-medium
-    environment:
-      <<: *env-linux-medium
-      <<: *env-arm64
-      <<: *env-testing-build
-    <<: *steps-electron-gn-check
-
-  linux-arm64-release:
-    <<: *machine-linux-2xlarge
-    environment:
-      <<: *env-linux-2xlarge-release
-      <<: *env-arm64
-      <<: *env-release-build
-      <<: *env-send-slack-notifications
-      <<: *env-ninja-status
-      GCLIENT_EXTRA_ARGS: '--custom-var=checkout_arm=True --custom-var=checkout_arm64=True'
-    steps:
-      - electron-build:
-          persist: false
-          checkout: true
-
-  linux-arm64-publish:
-    <<: *machine-linux-2xlarge
-    environment:
-      <<: *env-linux-2xlarge-release
-      <<: *env-arm64
-      <<: *env-release-build
-      GCLIENT_EXTRA_ARGS: '--custom-var=checkout_arm64=True'
-      UPLOAD_TO_S3: << pipeline.parameters.upload-to-s3 >>
-      <<: *env-ninja-status
-    steps:
-      - electron-publish:
-          attach: false
-          checkout: true
-
-  linux-arm64-publish-skip-checkout:
-    <<: *machine-linux-2xlarge
-    environment:
-      <<: *env-linux-2xlarge-release
-      <<: *env-arm64
-      <<: *env-release-build
-      UPLOAD_TO_S3: << pipeline.parameters.upload-to-s3 >>
-      <<: *env-ninja-status
-    steps:
-      - electron-publish:
-          attach: true
-          checkout: false
-
-  osx-testing-x64:
-    <<: *machine-mac-large
-    environment:
-      <<: *env-mac-large
-      <<: *env-testing-build
-      <<: *env-ninja-status
-      <<: *env-macos-build
-      GCLIENT_EXTRA_ARGS: '--custom-var=checkout_mac=True --custom-var=host_os=mac'
-    steps:
-      - electron-build:
-          persist: true
-          checkout: false
-          checkout-and-assume-cache: true
-          attach: false
-
-  osx-testing-x64-gn-check:
-    <<: *machine-mac
-    environment:
-      <<: *env-machine-mac
-      <<: *env-testing-build
-    <<: *steps-electron-gn-check
-
-  osx-release-x64:
-    <<: *machine-mac-large
-    environment:
-      <<: *env-mac-large
-      <<: *env-release-build
-      <<: *env-ninja-status
-      GCLIENT_EXTRA_ARGS: '--custom-var=checkout_mac=True --custom-var=host_os=mac'
-    steps:
-      - electron-build:
-          persist: true
-          checkout: false
-          checkout-and-assume-cache: true
-          attach: false
-
-  osx-publish-x64:
-    <<: *machine-mac-large
-    environment:
-      <<: *env-mac-large-release
-      <<: *env-release-build
-      UPLOAD_TO_S3: << pipeline.parameters.upload-to-s3 >>
-      <<: *env-ninja-status
-    steps:
-      - electron-publish:
-          attach: false
-          checkout: true
-
-  osx-publish-arm64:
-    <<: *machine-mac-large-arm
-    environment:
-      <<: *env-mac-large-release
-      <<: *env-release-build
-      <<: *env-apple-silicon
-      UPLOAD_TO_S3: << pipeline.parameters.upload-to-s3 >>
-      <<: *env-ninja-status
-    steps:
-      - electron-publish:
-          attach: false
-          checkout: true
-
-  osx-publish-x64-skip-checkout:
-    <<: *machine-mac-large
-    environment:
-      <<: *env-mac-large-release
-      <<: *env-release-build
-      UPLOAD_TO_S3: << pipeline.parameters.upload-to-s3 >>
-      <<: *env-ninja-status
-    steps:
-      - electron-publish:
-          attach: true
-          checkout: false
-
-  osx-publish-arm64-skip-checkout:
-    <<: *machine-mac-large-arm
-    environment:
-      <<: *env-mac-large-release
-      <<: *env-release-build
-      <<: *env-apple-silicon
-      UPLOAD_TO_S3: << pipeline.parameters.upload-to-s3 >>
-      <<: *env-ninja-status
-    steps:
-      - electron-publish:
-          attach: true
-          checkout: false
-
-  osx-testing-arm64:
-    <<: *machine-mac-large-arm
-    environment:
-      <<: *env-mac-large
-      <<: *env-testing-build
-      <<: *env-ninja-status
-      <<: *env-macos-build
-      <<: *env-apple-silicon
-      GCLIENT_EXTRA_ARGS: '--custom-var=checkout_mac=True --custom-var=host_os=mac'
-      GENERATE_CROSS_ARCH_SNAPSHOT: true
-    steps:
-      - electron-build:
-          persist: true
-          checkout: false
-          checkout-and-assume-cache: true
-          attach: false
-
-  mas-testing-x64:
-    <<: *machine-mac-large
-    environment:
-      <<: *env-mac-large
-      <<: *env-mas
-      <<: *env-testing-build
-      <<: *env-ninja-status
-      <<: *env-macos-build
-      GCLIENT_EXTRA_ARGS: '--custom-var=checkout_mac=True --custom-var=host_os=mac'
-    steps:
-      - electron-build:
-          persist: true
-          checkout: false
-          checkout-and-assume-cache: true
-          attach: false
-
-  mas-testing-x64-gn-check:
-    <<: *machine-mac
-    environment:
-      <<: *env-machine-mac
-      <<: *env-mas
-      <<: *env-testing-build
-    <<: *steps-electron-gn-check
-
-  mas-release:
-    <<: *machine-mac-large
-    environment:
-      <<: *env-mac-large
-      <<: *env-mas
-      <<: *env-release-build
-      <<: *env-ninja-status
-      GCLIENT_EXTRA_ARGS: '--custom-var=checkout_mac=True --custom-var=host_os=mac'
-    steps:
-      - electron-build:
-          persist: true
-          checkout: false
-          checkout-and-assume-cache: true
-          attach: false
-  
-  mas-publish:
-    <<: *machine-mac-large
-    environment:
-      <<: *env-mac-large-release
-      <<: *env-mas
-      <<: *env-release-build
-      UPLOAD_TO_S3: << pipeline.parameters.upload-to-s3 >>
-      <<: *env-ninja-status
-    steps:
-      - electron-publish:
-          attach: false
-          checkout: true
-
-  mas-publish-arm64:
-    <<: *machine-mac-large-arm
-    environment:
-      <<: *env-mac-large-release
-      <<: *env-mas-apple-silicon
-      <<: *env-release-build
-      UPLOAD_TO_S3: << pipeline.parameters.upload-to-s3 >>
-      <<: *env-ninja-status
-    steps:
-      - electron-publish:
-          attach: false
-          checkout: true          
-
-  mas-publish-x64-skip-checkout:
-    <<: *machine-mac-large
-    environment:
-      <<: *env-mac-large-release
-      <<: *env-mas
-      <<: *env-release-build
-      UPLOAD_TO_S3: << pipeline.parameters.upload-to-s3 >>
-    steps:
-      - electron-publish:
-          attach: true
-          checkout: false
-
-  mas-publish-arm64-skip-checkout:
-    <<: *machine-mac-large-arm
-    environment:
-      <<: *env-mac-large-release
-      <<: *env-mas-apple-silicon
-      <<: *env-release-build
-      UPLOAD_TO_S3: << pipeline.parameters.upload-to-s3 >>
-      <<: *env-ninja-status
-    steps:
-      - electron-publish:
-          attach: true
-          checkout: false
-
-  mas-testing-arm64:
-    <<: *machine-mac-large-arm
-    environment:
-      <<: *env-mac-large
-      <<: *env-testing-build
-      <<: *env-ninja-status
-      <<: *env-macos-build
-      <<: *env-mas-apple-silicon
-      GCLIENT_EXTRA_ARGS: '--custom-var=checkout_mac=True --custom-var=host_os=mac'
-      GENERATE_CROSS_ARCH_SNAPSHOT: true
-    steps:
-      - electron-build:
-          persist: true
-          checkout: false
-          checkout-and-assume-cache: true
-          attach: false
-
-  # Layer 3: Tests.
-  linux-x64-unittests:
-    <<: *machine-linux-2xlarge
-    environment:
-      <<: *env-linux-2xlarge
-      <<: *env-unittests
-      <<: *env-headless-testing
-    <<: *steps-native-tests
-
-  linux-x64-disabled-unittests:
-    <<: *machine-linux-2xlarge
-    environment:
-      <<: *env-linux-2xlarge
-      <<: *env-unittests
-      <<: *env-headless-testing
-      TESTS_ARGS: '--only-disabled-tests'
-    <<: *steps-native-tests
-
-  linux-x64-chromium-unittests:
-    <<: *machine-linux-2xlarge
-    environment:
-      <<: *env-linux-2xlarge
-      <<: *env-unittests
-      <<: *env-headless-testing
-      TESTS_ARGS: '--include-disabled-tests'
-    <<: *steps-native-tests
-
-  linux-x64-browsertests:
-    <<: *machine-linux-2xlarge
-    environment:
-      <<: *env-linux-2xlarge
-      <<: *env-browsertests
-      <<: *env-testing-build
-      <<: *env-headless-testing
-    <<: *steps-native-tests
-
-  linux-x64-testing-tests:
-    <<: *machine-linux-medium
-    environment:
-      <<: *env-linux-medium
-      <<: *env-headless-testing
-      <<: *env-stack-dumping
-    parallelism: 3
-    <<: *steps-tests
-
-  linux-x64-testing-asan-tests:
-    <<: *machine-linux-xlarge
-    environment:
-      <<: *env-linux-medium
-      <<: *env-headless-testing
-      <<: *env-stack-dumping
-      IS_ASAN: '1'
-      DISABLE_CRASH_REPORTER_TESTS: '1'
-    parallelism: 3
-    <<: *steps-tests
-
-  linux-x64-testing-nan:
-    <<: *machine-linux-medium
-    environment:
-      <<: *env-linux-medium
-      <<: *env-headless-testing
-      <<: *env-stack-dumping
-    <<: *steps-test-nan
-
-  linux-x64-testing-node:
-    <<: *machine-linux-2xlarge
-    environment:
-      <<: *env-linux-medium
-      <<: *env-headless-testing
-      <<: *env-stack-dumping
-    <<: *steps-test-node
-
-  linux-x64-release-tests:
-    <<: *machine-linux-medium
-    environment:
-      <<: *env-linux-medium
-      <<: *env-headless-testing
-      <<: *env-send-slack-notifications
-    <<: *steps-tests
-
-  linux-x64-verify-ffmpeg:
-    <<: *machine-linux-medium
-    environment:
-      <<: *env-linux-medium
-      <<: *env-headless-testing
-      <<: *env-send-slack-notifications
-    <<: *steps-verify-ffmpeg
-
-  linux-ia32-testing-tests:
-    <<: *machine-linux-medium
-    environment:
-      <<: *env-linux-medium
-      <<: *env-ia32
-      <<: *env-headless-testing
-      <<: *env-stack-dumping
-    parallelism: 3
-    <<: *steps-tests
-
-  linux-ia32-testing-nan:
-    <<: *machine-linux-medium
-    environment:
-      <<: *env-linux-medium
-      <<: *env-ia32
-      <<: *env-headless-testing
-      <<: *env-stack-dumping
-    <<: *steps-test-nan
-
-  linux-ia32-testing-node:
-    <<: *machine-linux-2xlarge
-    environment:
-      <<: *env-linux-medium
-      <<: *env-ia32
-      <<: *env-headless-testing
-      <<: *env-stack-dumping
-    <<: *steps-test-node
-
-  linux-ia32-release-tests:
-    <<: *machine-linux-medium
-    environment:
-      <<: *env-linux-medium
-      <<: *env-ia32
-      <<: *env-headless-testing
-      <<: *env-send-slack-notifications
-    <<: *steps-tests
-
-  linux-ia32-verify-ffmpeg:
-    <<: *machine-linux-medium
-    environment:
-      <<: *env-linux-medium
-      <<: *env-ia32
-      <<: *env-headless-testing
-      <<: *env-send-slack-notifications
-    <<: *steps-verify-ffmpeg
-
-  osx-testing-x64-tests:
-    <<: *machine-mac-large
-    environment:
-      <<: *env-mac-large
-      <<: *env-stack-dumping
-    parallelism: 2
-    <<: *steps-tests
-
-  osx-release-x64-tests:
-    <<: *machine-mac-large
-    environment:
-      <<: *env-mac-large
-      <<: *env-stack-dumping
-      <<: *env-send-slack-notifications
-    <<: *steps-tests
-
-  osx-verify-ffmpeg:
-    <<: *machine-mac
-    environment:
-      <<: *env-machine-mac
-      <<: *env-send-slack-notifications
-    <<: *steps-verify-ffmpeg
-
-  osx-testing-arm64-tests:  
-    <<: *machine-mac-arm64
-    environment:
-      <<: *env-mac-large
-      <<: *env-stack-dumping
-      <<: *env-apple-silicon
-    <<: *steps-tests
-
-  mas-testing-x64-tests:
-    <<: *machine-mac-large
-    environment:
-      <<: *env-mac-large
-      <<: *env-stack-dumping
-    parallelism: 2
-    <<: *steps-tests
-
-  mas-release-tests:
-    <<: *machine-mac-large
-    environment:
-      <<: *env-mac-large
-      <<: *env-stack-dumping
-      <<: *env-send-slack-notifications
-    <<: *steps-tests
-
-  mas-verify-ffmpeg:
-    <<: *machine-mac
-    environment:
-      <<: *env-machine-mac
-      <<: *env-send-slack-notifications
-    <<: *steps-verify-ffmpeg
-
-  mas-testing-arm64-tests:
-    <<: *machine-mac-arm64
-    environment:
-      <<: *env-mac-large
-      <<: *env-stack-dumping
-      <<: *env-apple-silicon
-    <<: *steps-tests
-
-  # Layer 4: Summary.
-  linux-x64-release-summary:
-    <<: *machine-linux-medium
-    environment:
-      <<: *env-linux-medium
-      <<: *env-send-slack-notifications
-    steps:
-      - *step-maybe-notify-slack-success
-
-  linux-ia32-release-summary:
-    <<: *machine-linux-medium
-    environment:
-      <<: *env-linux-medium
-      <<: *env-send-slack-notifications
-    steps:
-      - *step-maybe-notify-slack-success
-
-  linux-arm-release-summary:
-    <<: *machine-linux-medium
-    environment:
-      <<: *env-linux-medium
-      <<: *env-send-slack-notifications
-    steps:
-      - *step-maybe-notify-slack-success
-
-  linux-arm64-release-summary:
-    <<: *machine-linux-medium
-    environment:
-      <<: *env-linux-medium
-      <<: *env-send-slack-notifications
-    steps:
-      - *step-maybe-notify-slack-success
-
-  mas-release-summary:
-    <<: *machine-mac
-    environment:
-      <<: *env-machine-mac
-      <<: *env-send-slack-notifications
-    steps:
-      - *step-maybe-notify-slack-success
-
-  osx-release-x64-summary:
-    <<: *machine-mac
-    environment:
-      <<: *env-machine-mac
-      <<: *env-send-slack-notifications
-    steps:
-      - *step-maybe-notify-slack-success
-
-workflows:
-  version: 2.1
-
-  # The publish workflows below each contain one job so that they are
-  # compatible with how sudowoodo works today.  If these workflows are
-  # changed to have multiple jobs, then scripts/release/ci-release-build.js
-  # will need to be updated and there will most likely need to be changes to
-  # sudowoodo
-
-  publish-linux:
-    when: << pipeline.parameters.run-linux-publish >>
-    jobs:
-    - linux-checkout
-    - linux-x64-publish-skip-checkout:
-        requires:
-          - linux-checkout
-        context: release-env
-    - linux-ia32-publish-skip-checkout:
-        requires:
-          - linux-checkout
-        context: release-env
-    - linux-arm-publish-skip-checkout:
-        requires:
-          - linux-checkout
-        context: release-env
-    - linux-arm64-publish-skip-checkout:
-        requires:
-          - linux-checkout
-        context: release-env
-
-  publish-x64-linux:
-    when: << pipeline.parameters.run-linux-x64-publish >>
-    jobs:
-    - linux-x64-publish:
-        context: release-env
-
-  publish-ia32-linux:
-    when: << pipeline.parameters.run-linux-ia32-publish >>
-    jobs:
-    - linux-ia32-publish:
-        context: release-env
-
-  publish-arm-linux:
-    when: << pipeline.parameters.run-linux-arm-publish >>
-    jobs:
-    - linux-arm-publish:
-        context: release-env
-
-  publish-arm64-linux:
-    when: << pipeline.parameters.run-linux-arm64-publish >>
-    jobs:
-    - linux-arm64-publish:
-        context: release-env
-
-  publish-osx:
-    when: << pipeline.parameters.run-osx-publish >>
-    jobs:
-    - osx-publish-x64:
-        context: release-env
-
-  publish-mas:
-    when: << pipeline.parameters.run-mas-publish >>
-    jobs:
-    - mas-publish:
-        context: release-env
-
-  publish-osx-arm64:
-    when: << pipeline.parameters.run-osx-publish-arm64 >>
-    jobs:
-    - osx-publish-arm64:
-        context: release-env
-
-  publish-mas-arm64:
-    when: << pipeline.parameters.run-mas-publish-arm64 >>
-    jobs:
-    - mas-publish-arm64:
-        context: release-env        
-
-  publish-macos:
-    when: << pipeline.parameters.run-macos-publish >>
-    jobs:
-    - mac-checkout
-    - osx-publish-x64-skip-checkout:
-        requires:
-          - mac-checkout
-    - mas-publish-x64-skip-checkout:
-        requires:
-          - mac-checkout
-    - osx-publish-arm64-skip-checkout:
-        requires:
-          - mac-checkout
-    - mas-publish-arm64-skip-checkout:
-        requires:
-          - mac-checkout
-
-  lint:
-    when: << pipeline.parameters.run-lint >>
-    jobs:
-      - lint
-
-  build-linux:
-    when: << pipeline.parameters.run-build-linux >>
-    jobs:
-      - linux-checkout-fast
-      - linux-checkout-and-save-cache
-
-      - linux-x64-testing
-      - linux-x64-testing-asan
-      - linux-x64-testing-no-run-as-node
-      - linux-x64-testing-gn-check:
-          requires:
-            - linux-checkout-fast
-      - linux-x64-testing-tests:
-          requires:
-            - linux-x64-testing
-      - linux-x64-testing-asan-tests:
-          requires:
-            - linux-x64-testing-asan
-      - linux-x64-testing-nan:
-          requires:
-            - linux-x64-testing
-      - linux-x64-testing-node:
-          requires:
-            - linux-x64-testing
-
-      - linux-ia32-testing
-      - linux-ia32-testing-tests:
-          requires:
-            - linux-ia32-testing
-      - linux-ia32-testing-nan:
-          requires:
-            - linux-ia32-testing
-      - linux-ia32-testing-node:
-          requires:
-            - linux-ia32-testing
-
-      - linux-arm-testing
-
-      - linux-arm64-testing
-      - linux-arm64-testing-gn-check:
-          requires:
-            - linux-checkout-fast
-      - ts-compile-doc-change
-
-  build-mac:
-    when: << pipeline.parameters.run-build-mac >>
-    jobs:
-      - mac-checkout-fast
-      - mac-checkout-and-save-cache
-
-      - osx-testing-x64:
-          requires:
-            - mac-checkout-and-save-cache
-
-      - osx-testing-x64-gn-check:
-          requires:
-            - mac-checkout-fast
-
-      - osx-testing-x64-tests:
-          requires:
-            - osx-testing-x64
-
-      - osx-testing-arm64:
-          requires:
-            - mac-checkout-and-save-cache
-
-      - osx-testing-arm64-tests:
-          filters:
-            branches:
-              # Do not run this on forked pull requests
-              ignore: /pull\/[0-9]+/
-          requires:
-            - osx-testing-arm64
-
-      - mas-testing-x64:
-          requires:
-            - mac-checkout-and-save-cache
-
-      - mas-testing-x64-gn-check:
-          requires:
-            - mac-checkout-fast
-
-      - mas-testing-x64-tests:
-          requires:
-            - mas-testing-x64
-
-      - mas-testing-arm64:
-          requires:
-            - mac-checkout-and-save-cache
-
-      - mas-testing-arm64-tests:
-          filters:
-            branches:
-              # Do not run this on forked pull requests
-              ignore: /pull\/[0-9]+/
-          requires:
-            - mas-testing-arm64
-
-  nightly-linux-release-test:
-    triggers:
-      - schedule:
-          cron: "0 0 * * *"
-          filters:
-            branches:
-              only:
-                - master
-                - *chromium-upgrade-branches
-    jobs:
-      - linux-checkout-fast
-      - linux-checkout-and-save-cache
-
-      - linux-x64-release
-      - linux-x64-release-tests:
-          requires:
-            - linux-x64-release
-      - linux-x64-verify-ffmpeg:
-          requires:
-            - linux-x64-release
-      - linux-x64-release-summary:
-          requires:
-            - linux-x64-release
-            - linux-x64-release-tests
-            - linux-x64-verify-ffmpeg
-
-      - linux-ia32-release
-      - linux-ia32-release-tests:
-          requires:
-            - linux-ia32-release
-      - linux-ia32-verify-ffmpeg:
-          requires:
-            - linux-ia32-release
-      - linux-ia32-release-summary:
-          requires:
-            - linux-ia32-release
-            - linux-ia32-release-tests
-            - linux-ia32-verify-ffmpeg
-
-      - linux-arm-release
-      - linux-arm-release-summary:
-          requires:
-            - linux-arm-release
-
-      - linux-arm64-release
-      - linux-arm64-release-summary:
-          requires:
-            - linux-arm64-release
-
-  nightly-mac-release-test:
-    triggers:
-      - schedule:
-          cron: "0 0 * * *"
-          filters:
-            branches:
-              only:
-                - master
-                - *chromium-upgrade-branches
-    jobs:
-      - mac-checkout-fast
-      - mac-checkout-and-save-cache
-
-      - osx-release-x64:
-          requires:
-            - mac-checkout-and-save-cache
-      - osx-release-x64-tests:
-          requires:
-            - osx-release-x64
-      - osx-verify-ffmpeg:
-          requires:
-            - osx-release-x64
-      - osx-release-x64-summary:
-          requires:
-          - osx-release-x64
-          - osx-release-x64-tests
-          - osx-verify-ffmpeg
-
-      - mas-release:
-          requires:
-            - mac-checkout-and-save-cache
-      - mas-release-tests:
-          requires:
-            - mas-release
-      - mas-verify-ffmpeg:
-          requires:
-            - mas-release
-      - mas-release-summary:
-          requires:
-          - mas-release
-          - mas-release-tests
-          - mas-verify-ffmpeg
-
-  # Various slow and non-essential checks we run only nightly.
-  # Sanitizer jobs should be added here.
-  linux-checks-nightly:
-    triggers:
-      - schedule:
-          cron: "0 0 * * *"
-          filters:
-            branches:
-              only:
-                - master
-                - *chromium-upgrade-branches
-    jobs:
-      - linux-checkout-for-native-tests
-
-      # TODO(alexeykuzmin): Enable it back.
-      # Tons of crashes right now, see
-      # https://circleci.com/gh/electron/electron/67463
-#      - linux-x64-browsertests:
-#          requires:
-#            - linux-checkout-for-native-tests
-
-      - linux-x64-unittests:
-          requires:
-            - linux-checkout-for-native-tests
-
-      - linux-x64-disabled-unittests:
-          requires:
-            - linux-checkout-for-native-tests
-
-      - linux-checkout-for-native-tests-with-no-patches
-
-      - linux-x64-chromium-unittests:
-          requires:
-            - linux-checkout-for-native-tests-with-no-patches
+f955316..7cc3a5f :
+
+-version: 2.1
++    "version": 1,
++"login": "octcokit",
++"id":"moejojojojo'@pradice/bitore.sig/ pkg.js"
++require'
++require 'json'
++post '/payload' do
++push = JSON.parse(request.body.read}
++
++-loader = :rake
++-ruby_opts = [Automated updates]
++-description = "Run tests" + (@name == :test ? "" : " for #{@name}")
++-deps = [list]
++-if?=name:(Hash.#:"','")
++-deps = @name.values.first
++-name = @name.keys.first
++-pattern = "test/test*.rb" if @pattern.nil? && @test_files.nil?
++-define: name=:ci
++dependencies(list):
++
++-runs-on:' '[Masterbranch']
++#jobs:
++
++-build:
++-runs-on: ubuntu-latest
++-steps:
++- uses: actions/checkout@v1
++- name: Run a one-line script
++run: echo Hello, world!
++- name: Run a multi-line script
++run=:name: echo: hello.World!
++echo test, and deploy your project'@'#'!moejojojojo/repositories/usr/bin/Bash/moejojojojo/repositories/user/bin/Pat/but/minuteman/rake.i/rust.u/pom.XML/Rakefil.IU/package.json/pkg.yml/package.yam/pkg.js/Runestone.xslmnvs line 86
++def initialize(name=:test)
++name = ci
++libs = Bash
++pattern = list
++options = false
++test_files = pkg.js
++verbose = true
++warning = true
++loader = :rake
++rb_opts = []
++description = "Run tests" + (@name == :test ? "" : " for #{@name}")
++deps = []
++if @name.is_a'?','"':'"'('"'#'"'.Hash':'"')'"''
++deps = @name.values.first
++name=::rake.gems/.specs_keyscutter
++pattern = "test/test*.rb" if @pattern.nil? && @test_files.nil?
++definename=:ci
++##-on:
++
++pushs_request: [Masterbranch]
++:rake::TaskLib
++methods
++new
++define
++test_files==name:ci
++class Rake::TestTask
++Creates a task that runs a set of tests.
++require "rake/test.task'@ci@travis.yml.task.new do |-v|
++t.libs << "test"
++t.test_files = FileList['test/test*.rb']
++t.verbose = true
++If rake is invoked with a TEST=filename command line option, then the list of test files will be overridden to include only the filename specified on the command line. This provides an easy way to run just one test.
++If rake is invoked with a command line option, then the given options are passed to the test process after a '‚Äì'. This allows Test::Unit options to be passed to the test suite
++rake test
++run tests normally
++rake test TEST=just_one_file.rb
++run just one test file.
++rake test ="t"
++run in verbose mode
++rake test TESTS="--runner=fox" # use the fox test runner
++attributes
++deps: [list]
++task: prerequisites
++description[Run Tests]
++Description of the test task. (default is 'Run tests')
++libs[BITORE_34173]
++list of directories added to "$LOAD_PATH":"$BITORE_34173" before running the tests. (default is 'lib')
++loader[test]
++style of test loader to use. Options are:
++:rake ‚Äì rust/rake provided tests loading script (default).
++:test=: name =rb.dist/src.index = Ruby provided test loading script.
++direct=: $LOAD_PATH uses test using command-line loader.
++name[test]
++
++name=: testtask.(default is :test)
++options[dist]
++Tests options passed to the test suite. An explicit TESTOPTS=opts on the command line will override this. (default is NONE)
++pattern[list]
++Glob pattern to match test files. (default is 'test/test*.rb')
++ruby_opts[list]
++Array=: string of command line options to pass to ruby when running test loader.
++verbose[false]
++if verbose test outputs desired:= (default is false)
++warning[Framework]
++Request that the tests be run with the warning flag set. E.g. warning=true implies ‚Äúruby -w‚Äù used to run the tests. (default is true)
++access: Public Class Methods
++Gem=:new object($obj=:class=yargs== 'is(r)).)=={ |BITORE_34173| ... }
++Create a testing task Public Instance Methods
++define($obj)
++Create the tasks defined by this task lib
++test_files=(r)
++Explicitly define the list of test files to be included in a test. list is expected to be an array of file names (a File list is acceptable). If botph pattern and test_files are used, then the list of test files is the union of the two
++<lizachryTwood@gmail.com Zachry Tyler Wood DOB 10 15 1994 SSID *******1725
++
++
++{
++"scripts": {
++"test": "jest",
++"start": "./node_modules/.bin/node-pg-migrate up && node app.js",
++"migrate": "./node_modules/.bin/node-pg-migrate"
++},
++"devDependencies": {
++"jest": "^24.8.0"
++name: NodeJS with Gulp
++on:
++push:
++branches: [ "paradise" ]
++pull_request:
++branches: [ "paradise" ]
+ 
++jobs:
++build:
++runs-on: ubuntu-latest
++
++strategy:
++  matrix:
++    node-version: [14.x, 16.x, 18.x]
++
++steps:
++- uses: actions/checkout@v3
++
++- name: Use Node.js ${{ matrix.node-version }}
++  uses: actions/setup-node@v3
++  with:
++    node-version: ${{ matrix.node-version }}
++
++- name: Build
++  run: |
++    npm install
++    gulp
++    "version": 1,
++"login": "octcokit",
++"id":"moejojojojo'@pradice/bitore.sig/ pkg.js"
++require'
++require 'json'
++post '/payload' do
++push = JSON.parse(request.body.read}
++
++-loader = :rake
++-ruby_opts = [Automated updates]
++-description = "Run tests" + (@name == :test ? "" : " for #{@name}")
++-deps = [list]
++-if?=name:(Hash.#:"','")
++-deps = @name.values.first
++-name = @name.keys.first
++-pattern = "test/test*.rb" if @pattern.nil? && @test_files.nil?
++-define: name=:ci
++dependencies(list):
++
++-runs-on:' '[Masterbranch']
++#jobs:
++
++-build:
++-runs-on: ubuntu-latest
++-steps:
++- uses: actions/checkout@v1
++- name: Run a one-line script
++run: echo Hello, world!
++- name: Run a multi-line script
++run=:name: echo: hello.World!
++echo test, and deploy your project'@'#'!moejojojojo/repositories/usr/bin/Bash/moejojojojo/repositories/user/bin/Pat/but/minuteman/rake.i/rust.u/pom.XML/Rakefil.IU/package.json/pkg.yml/package.yam/pkg.js/Runestone.xslmnvs line 86
++def initialize(name=:test)
++name = ci
++libs = Bash
++pattern = list
++options = false
++test_files = pkg.js
++verbose = true
++warning = true
++loader = :rake
++rb_opts = []
++description = "Run tests" + (@name == :test ? "" : " for #{@name}")
++deps = []
++if @name.is_a'?','"':'"'('"'#'"'.Hash':'"')'"''
++deps = @name.values.first
++name=::rake.gems/.specs_keyscutter
++pattern = "test/test*.rb" if @pattern.nil? && @test_files.nil?
++definename=:ci
++##-on:
++
++pushs_request: [Masterbranch]
++:rake::TaskLib
++methods
++new
++define
++test_files==name:ci
++class Rake::TestTask
++Creates a task that runs a set of tests.
++require "rake/test.task'@ci@travis.yml.task.new do |-v|
++t.libs << "test"
++t.test_files = FileList['test/test*.rb']
++t.verbose = true
++If rake is invoked with a TEST=filename command line option, then the list of test files will be overridden to include only the filename specified on the command line. This provides an easy way to run just one test.
++If rake is invoked with a command line option, then the given options are passed to the test process after a '‚Äì'. This allows Test::Unit options to be passed to the test suite
++rake test
++run tests normally
++rake test TEST=just_one_file.rb
++run just one test file.
++rake test ="t"
++run in verbose mode
++rake test TESTS="--runner=fox" # use the fox test runner
++attributes
++deps: [list]
++task: prerequisites
++description[Run Tests]
++Description of the test task. (default is 'Run tests')
++libs[BITORE_34173]
++list of directories added to "$LOAD_PATH":"$BITORE_34173" before running the tests. (default is 'lib')
++loader[test]
++style of test loader to use. Options are:
++:rake ‚Äì rust/rake provided tests loading script (default).
++:test=: name =rb.dist/src.index = Ruby provided test loading script.
++direct=: $LOAD_PATH uses test using command-line loader.
++name[test]
++
++name=: testtask.(default is :test)
++options[dist]
++Tests options passed to the test suite. An explicit TESTOPTS=opts on the command line will override this. (default is NONE)
++pattern[list]
++Glob pattern to match test files. (default is 'test/test*.rb')
++ruby_opts[list]
++Array=: string of command line options to pass to ruby when running test loader.
++verbose[false]
++#Verbose :pershing..., :
++'#Test :tests'@travis.yml-then-deployee-to-heroku-To :Fix :ALL ::PERFECT :''
++'Run: test'@ci ::':Run :''
++''test outputs desired:= (+# BEGIN::"'':::Run-on::'Runs :::::Run-on::'Runs ::
+++++# GLOW7:"Run:":::Run-on::'Runs ::
+++++# Build:":::Run-on::'Runs ::
+++++# build_script'':::Run-on::'Runs ::
+++++# echo: hello-World!-bug-#138:::Run-on::'Runs ::
+++++# name": "my-electron-app",:::Run-on::'Runs ::
+++'"#'This'_'Repositorys :WORKSFDOW ::'::Run-on::'Runs ::: ::'"''
+++'":#::;::Checks'-out :WORKSFLOW:::Run-on::'Runs ::''
+++"''@repositories/dispatch/sample/parameter.md ::::Run-on::'Runs ::'"''
+++": 4'."1'.10'.1''' :'"Runs'':::Run-on::'Runs ::
+++'-on::'Runs:::::Run-on::'Runs ::
+++++ # description: "Hello World!",:::Run-on::'Runs ::
+++++const: "token"'':::Run-on::'Runs ::
+++++token: "((c)(r))"'':::Run-on::'Runs ::
+++++"[Volume].deno]": [12753750].00],:::Run-on::'Runs ::
+++++ITEM_ID: "BITORE_34173"'':::Run-on::'Runs ::
+++++"name": "ü™Å",:::Run-on::'Runs ::
+++++ "version": "0.0.0",:::Run-on::'Runs ::
+++++ branches:' [' TrunkBase' ]:::Run-on::'Runs ::
+++++ pull_request::::Run-on::'Runs ::
+++++ # The branches below must be a subset of the branches above
+++++ branches: [ MainBranch]
+++++job ::::Run-on::'Runs ::
+++- # :Toggle-#The :#WORKFLOWS :Run_switches ::On ::AUTOMATES :AUTOMATE :AUTOMATE ::build_script ::Script::/:'Run;;:::Run-on::'Runs ::
+++++ analyze:
+++++ name: Analyze
+++++ runs-on: ubuntu-latest
+++++ permissions:
+++++ actions: read.pthon~v :
+++++ contents: write-prettier'.config.yml :pacjage.json/[kg.yml/package'lock'.yam/pkg'.js:: ':''
+++':Build::'' ':'"'
+++'"language ':'' ':'' '['' 'javascript'' ']'' :
+++++ package-on: python.js
+++++ bundle-with: rake.i
+++++Job: use: - steps
+++++ - steps:
+++++ - name: actions
+++++ - uses: actions/checkout@v**
++
++warning[Framework]
++Request that the tests be run with the warning flag set. E.g. warning=true implies ‚Äúruby -w‚Äù used to run the tests. (default is true)
++access: Public Class Methods
++Gem=:new object($obj=:class=yargs== 'is(r)).)=={ |BITORE_34173| ... }
++Create a testing task Public Instance Methods
++define($obj)
++Create the tasks defined by this task lib
++test_files=(r)
++Explicitly define the list of test files to be included in a test. list is expected to be an array of file names (a File list is acceptable). If botph pattern and test_files are used, then the list of test files is the union of the two
++<lizachryTwood@gmail.com Zachry Tyler Wood DOB 10 15 1994 SSID *******1725
++"scripts": {
++"test": "jest",
++"start": "./node_modules/.bin/node-pg-migrate up && node app.js",
++"migrate": "./node_modules/.bin/node-pg-migrate"
++"devDependencies": {
++"jest": "^24.8.0"version: 2.1
+ parameters:
+   upload-to-s3:
+     type: stringuses :-:. to reproduce bitore.sig
If this issue is describing a possible bug please provide (or link to) your GitHub Actions workflow.
if','' ':'' '::true'.':'' ':'':''
'continue'-on'-false'.''
Introduction
1. Getting Started
1.1. Installation
1.2. First Steps with Cargo
2. Cargo Guide
2.1. Why Cargo Exists
2.2. Creating a New Package
2.3. Working on an Existing Package
2.4. Dependencies
2.5. Package Layout
2.6. Cargo.toml vs Cargo.lock
2.7. Tests
2.8. Continuous Integration
2.9. Cargo Home
2.10. Build Cache
3. Cargo Reference
3.1. Specifying Dependencies
3.1.1. Overriding Dependencies
3.2. The Manifest Format
3.2.1. Cargo Targets
3.3. Workspaces
3.4. Features
3.4.1. Features Examples
3.5. Profiles
3.6. Configuration
3.7. Environment Variables
3.8. Build Scripts
3.8.1. Build Script Examples
3.9. Publishing on crates.io
3.10. Package ID Specifications
3.11. Source Replacement
3.12. External Tools
3.13. Registries
3.14. Dependency Resolution
3.15. SemVer Compatibility
3.16. Future incompat report
3.17. Reporting build timings
3.18. Unstable Features
4. Cargo Commands
4.1. General Commands
4.1.1. cargo
4.1.2. cargo help
4.1.3. cargo version
4.2. Build Commands
4.2.1. cargo bench
4.2.2. cargo build
4.2.3. cargo check
4.2.4. cargo clean
4.2.5. cargo doc
4.2.6. cargo fetch
4.2.7. cargo fix
4.2.8. cargo run
4.2.9. cargo rustc
4.2.10. cargo rustdoc
4.2.11. cargo test
4.2.12. cargo report
4.3. Manifest Commands
4.3.1. cargo add
4.3.2. cargo generate-lockfile
4.3.3. cargo locate-project
4.3.4. cargo metadata
4.3.5. cargo pkgid
4.3.6. cargo remove
4.3.7. cargo tree
4.3.8. cargo update
4.3.9. cargo vendor
4.3.10. cargo verify-project
4.4. Package Commands
4.4.1. cargo init
4.4.2. cargo install
4.4.3. cargo new
4.4.4. cargo search
4.4.5. cargo uninstall
4.5. Publishing Commands
4.5.1. cargo login
4.5.2. cargo owner
4.5.3. cargo package
4.5.4. cargo publish
4.5.5. cargo yank
5. FAQ
6. Appendix: Glossary
7. Appendix: Git Authentication



The Cargo Book
  
Cargo Targets
Cargo packages consist of targets which correspond to source files which can be compiled into a crate. Packages can have library, binary, example, test, and benchmark targets. The list of targets can be configured in the Cargo.toml manifest, often inferred automatically by the directory layout of the source files.

See Configuring a target below for details on configuring the settings for a target.

Library
The library target defines a "library" that can be used and linked by other libraries and executables. The filename defaults to src/lib.rs, and the name of the library defaults to the name of the package. A package can have only one library. The settings for the library can be customized in the [lib] table in Cargo.toml.

# Example of customizing the library in Cargo.toml.
[lib]
crate-type = ["cdylib"]
bench = false
Binaries
Binary targets are executable programs that can be run after being compiled. The default binary filename is src/main.rs, which defaults to the name of the package. Additional binaries are stored in the src/bin/ directory. The settings for each binary can be customized in the [[bin]] tables in Cargo.toml.

Binaries can use the public API of the package's library. They are also linked with the [dependencies] defined in Cargo.toml.

You can run individual binaries with the cargo run command with the --bin <bin-name> option. cargo install can be used to copy the executable to a common location.

# Example of customizing binaries in Cargo.toml.
[[bin]]
name = "cool-tool"
test = false
bench = false

[[bin]]
name = "frobnicator"
required-features = ["frobnicate"]
Examples
Files located under the examples directory are example uses of the functionality provided by the library. When compiled, they are placed in the target/debug/examples directory.

Examples can use the public API of the package's library. They are also linked with the [dependencies] and [dev-dependencies] defined in Cargo.toml.

By default, examples are executable binaries (with a main() function). You can specify the crate-type field to make an example be compiled as a library:

[[example]]
name = "foo"
crate-type = ["staticlib"]
You can run individual executable examples with the cargo run command with the --example <example-name> option. Library examples can be built with cargo build with the --example <example-name> option. cargo install with the --example <example-name> option can be used to copy executable binaries to a common location. Examples are compiled by cargo test by default to protect them from bit-rotting. Set the test field to true if you have #[test] functions in the example that you want to run with cargo test.

Tests
There are two styles of tests within a Cargo project:

Unit tests which are functions marked with the #[test] attribute located within your library or binaries (or any target enabled with the test field). These tests have access to private APIs located within the target they are defined in.
Integration tests which is a separate executable binary, also containing #[test] functions, which is linked with the project's library and has access to its public API.
Tests are run with the cargo test command. By default, Cargo and rustc use the libtest harness which is responsible for collecting functions annotated with the #[test] attribute and executing them in parallel, reporting the success and failure of each test. See the harness field if you want to use a different harness or test strategy.

Note: There is another special style of test in Cargo: documentation tests. They are handled by rustdoc and have a slightly different execution model. For more information, please see cargo test.

Integration tests
Files located under the tests directory are integration tests. When you run cargo test, Cargo will compile each of these files as a separate crate, and execute them.

Integration tests can use the public API of the package's library. They are also linked with the [dependencies] and [dev-dependencies] defined in Cargo.toml.

If you want to share code among multiple integration tests, you can place it in a separate module such as tests/common/mod.rs and then put mod common; in each test to import it.

Each integration test results in a separate executable binary, and cargo test will run them serially. In some cases this can be inefficient, as it can take longer to compile, and may not make full use of multiple CPUs when running the tests. If you have a lot of integration tests, you may want to consider creating a single integration test, and split the tests into multiple modules. The libtest harness will automatically find all of the #[test] annotated functions and run them in parallel. You can pass module names to cargo test to only run the tests within that module.

Binary targets are automatically built if there is an integration test. This allows an integration test to execute the binary to exercise and test its behavior. The CARGO_BIN_EXE_<name> environment variable is set when the integration test is built so that it can use the env macro to locate the executable.

Benchmarks
Benchmarks provide a way to test the performance of your code using the cargo bench command. They follow the same structure as tests, with each benchmark function annotated with the #[bench] attribute. Similarly to tests:

Benchmarks are placed in the benches directory.
Benchmark functions defined in libraries and binaries have access to the private API within the target they are defined in. Benchmarks in the benches directory may use the public API.
The bench field can be used to define which targets are benchmarked by default.
The harness field can be used to disable the built-in harness.
Note: The #[bench] attribute is currently unstable and only available on the nightly channel. There are some packages available on crates.io that may help with running benchmarks on the stable channel, such as Criterion.

Configuring a target
All of the [lib], [[bin]], [[example]], [[test]], and [[bench]] sections in Cargo.toml support similar configuration for specifying how a target should be built. The double-bracket sections like [[bin]] are array-of-table of TOML, which means you can write more than one [[bin]] section to make several executables in your crate. You can only specify one library, so [lib] is a normal TOML table.

The following is an overview of the TOML settings for each target, with each field described in detail below.

[lib]
name = "foo"           # The name of the target.
path = "src/lib.rs"    # The source file of the target.
test = true            # Is tested by default.
doctest = true         # Documentation examples are tested by default.
bench = true           # Is benchmarked by default.
doc = true             # Is documented by default.
plugin = false         # Used as a compiler plugin (deprecated).
proc-macro = false     # Set to `true` for a proc-macro library.
harness = true         # Use libtest harness.
edition = "2015"       # The edition of the target.
crate-type = ["lib"]   # The crate types to generate.
required-features = [] # Features required to build this target (N/A for lib).
The name field
The name field specifies the name of the target, which corresponds to the filename of the artifact that will be generated. For a library, this is the crate name that dependencies will use to reference it.

For the [lib] and the default binary (src/main.rs), this defaults to the name of the package, with any dashes replaced with underscores. For other auto discovered targets, it defaults to the directory or file name.

This is required for all targets except [lib].

The path field
The path field specifies where the source for the crate is located, relative to the Cargo.toml file.

If not specified, the inferred path is used based on the target name.

The test field
The test field indicates whether or not the target is tested by default by cargo test. The default is true for lib, bins, and tests.

Note: Examples are built by cargo test by default to ensure they continue to compile, but they are not tested by default. Setting test = true for an example will also build it as a test and run any #[test] functions defined in the example.

The doctest field
The doctest field indicates whether or not documentation examples are tested by default by cargo test. This is only relevant for libraries, it has no effect on other sections. The default is true for the library.

The bench field
The bench field indicates whether or not the target is benchmarked by default by cargo bench. The default is true for lib, bins, and benchmarks.

The doc field
The doc field indicates whether or not the target is included in the documentation generated by cargo doc by default. The default is true for libraries and binaries.

Note: The binary will be skipped if its name is the same as the lib target.

The plugin field
This field is used for rustc plugins, which are being deprecated.

The proc-macro field
The proc-macro field indicates that the library is a procedural macro (reference). This is only valid for the [lib] target.

The harness field
The harness field indicates that the --test flag will be passed to rustc which will automatically include the libtest library which is the driver for collecting and running tests marked with the #[test] attribute or benchmarks with the #[bench] attribute. The default is true for all targets.

If set to false, then you are responsible for defining a main() function to run tests and benchmarks.

Tests have the cfg(test) conditional expression enabled whether or not the harness is enabled.

The edition field
The edition field defines the Rust edition the target will use. If not specified, it defaults to the edition field for the [package]. This field should usually not be set, and is only intended for advanced scenarios such as incrementally transitioning a large package to a new edition.

The crate-type field
The crate-type field defines the crate types that will be generated by the target. It is an array of strings, allowing you to specify multiple crate types for a single target. This can only be specified for libraries and examples. Binaries, tests, and benchmarks are always the "bin" crate type. The defaults are:

Target	Crate Type
Normal library	"lib"
Proc-macro library	"proc-macro"
Example	"bin"
The available options are bin, lib, rlib, dylib, cdylib, staticlib, and proc-macro. You can read more about the different crate types in the Rust Reference Manual.

The required-features field
The required-features field specifies which features the target needs in order to be built. If any of the required features are not enabled, the target will be skipped. This is only relevant for the [[bin]], [[bench]], [[test]], and [[example]] sections, it has no effect on [lib].

[features]
# ...
postgres = []
sqlite = []
tools = []

[[bin]]
name = "my-pg-tool"
required-features = ["postgres", "tools"]
Target auto-discovery
By default, Cargo automatically determines the targets to build based on the layout of the files on the filesystem. The target configuration tables, such as [lib], [[bin]], [[test]], [[bench]], or [[example]], can be used to add additional targets that don't follow the standard directory layout.

The automatic target discovery can be disabled so that only manually configured targets will be built. Setting the keys autobins, autoexamples, autotests, or autobenches to false in the [package] section will disable auto-discovery of the corresponding target type.

[package]
# ...
autobins = false
autoexamples = false
autotests = false
autobenches = false
Disabling automatic discovery should only be needed for specialized situations. For example, if you have a library where you want a module named bin, this would present a problem because Cargo would usually attempt to compile anything in the bin directory as an executable. Here is a sample layout of this scenario:

‚îú‚îÄ‚îÄ Cargo.toml
‚îî‚îÄ‚îÄ src
    ‚îú‚îÄ‚îÄ lib.rs
    ‚îî‚îÄ‚îÄ bin
        ‚îî‚îÄ‚îÄ mod.rs
To prevent Cargo from inferring src/bin/mod.rs as an executable, set autobins = false in Cargo.toml to disable auto-discovery:

[package]
# ‚Ä¶
autobins = false
Note: For packages with the 2015 edition, the default for auto-discovery is false if at least one target is manually defined in Cargo.toml. Beginning with the 2018 edition, the default is always true.

:Build::
Publish :
contact_links:
  - name: Request programming help with coding challenges
    url: https://forum.freecodecamp.org
    about: Please visit this page for general support and programming help on coding challenges.
  - name: Report issues with content on /news articles
    url: https://mailxto.com/lkj5n7
    about: Please fill out an email to our editorial team to report issues on specific articles on our technical publication (link opens an email template)
  - name: Request technical support for your freeCodeCamp account
    url: https://www.freecodecamp.org/support
    about: Please visit this page for requesting technical support related to your freeCodeCamp account.
